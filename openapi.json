{
  "openapi": "3.0.0",
  "paths": {
    "/openapi.json": {
      "get": {
        "operationId": "OpenAiController_getOpenAiJson",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/.well-known/ai-plugin.json": {
      "get": {
        "operationId": "OpenAiController_getAiPluginJson",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/assets/global-metadata": {
      "get": {
        "operationId": "AssetsController_getGlobalMetadataKeys",
        "summary": "Fetch an Global Asset Metadata",
        "description": "This endpoint retrieves all the Asset Global Metadata on chain",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of Asset Global Metadata which includes id, name and specs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GlobalMetadataModel"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "assets",
          "metadata"
        ]
      }
    },
    "/assets/{ticker}": {
      "get": {
        "operationId": "AssetsController_getDetails",
        "summary": "Fetch Asset details",
        "description": "This endpoint will provide the basic details of an Asset",
        "parameters": [
          {
            "name": "ticker",
            "required": true,
            "in": "path",
            "description": "The ticker of the Asset whose details are to be fetched",
            "example": "TICKER",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Basic details of the Asset",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDetailsModel"
                }
              }
            }
          }
        },
        "tags": [
          "assets"
        ]
      }
    },
    "/assets/{ticker}/holders": {
      "get": {
        "operationId": "AssetsController_getHolders",
        "summary": "Fetch a list of Asset holders",
        "description": "This endpoint will provide the list of Asset holders along with their current balance",
        "parameters": [
          {
            "name": "ticker",
            "required": true,
            "in": "path",
            "description": "The ticker of the Asset whose holders are to be fetched",
            "example": "TICKER",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "required": false,
            "in": "query",
            "description": "The number of Asset holders to be fetched",
            "example": "10",
            "schema": {
              "default": "10",
              "type": "string"
            }
          },
          {
            "name": "start",
            "required": false,
            "in": "query",
            "description": "Start key from which Asset holders are to be fetched",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Asset holders, each consisting of a DID and their current Asset balance",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResultsModel"
                    },
                    {
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/IdentityBalanceModel"
                          },
                          "description": "List of Asset holders, each consisting of a DID and their current Asset balance"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "assets"
        ]
      }
    },
    "/assets/{ticker}/documents": {
      "get": {
        "operationId": "AssetsController_getDocuments",
        "summary": "Fetch a list of Asset documents",
        "description": "This endpoint will provide the list of documents attached to an Asset",
        "parameters": [
          {
            "name": "ticker",
            "required": true,
            "in": "path",
            "description": "The ticker of the Asset whose attached documents are to be fetched",
            "example": "TICKER",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "required": false,
            "in": "query",
            "description": "The number of documents to be fetched",
            "example": "10",
            "schema": {
              "default": "10",
              "type": "string"
            }
          },
          {
            "name": "start",
            "required": false,
            "in": "query",
            "description": "Start key from which documents are to be fetched",
            "example": "START_KEY",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of documents attached to the Asset",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResultsModel"
                    },
                    {
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/AssetDocumentModel"
                          },
                          "description": "List of documents attached to the Asset"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "assets"
        ]
      }
    },
    "/assets/{ticker}/documents/set": {},
    "/assets/{ticker}/issue": {},
    "/assets/create": {},
    "/assets/{ticker}/transfer-ownership": {},
    "/assets/{ticker}/redeem": {},
    "/assets/{ticker}/freeze": {},
    "/assets/{ticker}/unfreeze": {},
    "/assets/{ticker}/controller-transfer": {},
    "/assets/{ticker}/operations": {
      "get": {
        "operationId": "AssetsController_getOperationHistory",
        "summary": "Fetch an Asset's operation history",
        "description": "This endpoint provides a list of events triggered by transactions performed by various agent Identities, related to the Asset's configuration",
        "parameters": [
          {
            "name": "ticker",
            "required": true,
            "in": "path",
            "description": "The ticker of the Asset whose operation history is to be fetched",
            "example": "TICKER",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of operations grouped by the agent Identity who performed them",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgentOperationModel"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "assets"
        ]
      }
    },
    "/transactions/{hash}/details": {
      "get": {
        "operationId": "TransactionsController_getTransactionByHash",
        "summary": "Get transaction details using hash",
        "description": "This endpoint will provide details of the transaction filtered by its hash. This requires Polymesh GraphQL Middleware Service",
        "parameters": [
          {
            "name": "hash",
            "required": true,
            "in": "path",
            "description": "Hash of the transaction whose details are to be fetched",
            "example": "0xf36f83c943cbc7d915d52be502d52cdb04c7eacd13a2bea6e17ea37bf1e49224",
            "schema": {
              "minLength": 66,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtrinsicDetailsModel"
                }
              }
            }
          },
          "400": {
            "description": "Given hash is not hexadecimal"
          },
          "404": {
            "description": "Transaction does not exist"
          }
        },
        "tags": [
          "transactions"
        ]
      }
    },
    "/signer/{signer}": {
      "get": {
        "operationId": "SigningController_getSignerAddress",
        "summary": "Fetch signer details",
        "description": "This endpoint provides information associated with a particular `signer`",
        "parameters": [
          {
            "name": "signer",
            "required": true,
            "in": "path",
            "description": "The value of the `signer` to fetch the address for. Note, the format depends on the signing manager the API is configured with. A Fireblocks signer is up to three numbers like `x-y-z`, Vault will be `{name}-{version}`, while a Local signer can be any string, like `alice`",
            "example": "alice",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the address associated to the signer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignerModel"
                }
              }
            }
          },
          "400": {
            "description": "The signer did not have the proper format for the given signing manager"
          },
          "404": {
            "description": "The signer was not found"
          }
        },
        "tags": [
          "signer"
        ]
      }
    },
    "/network": {
      "get": {
        "operationId": "NetworkController_getNetworkProperties",
        "summary": "Fetch network properties",
        "description": "This endpoint will provide the network name and version",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Network properties response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkPropertiesModel"
                }
              }
            }
          }
        },
        "tags": [
          "network"
        ]
      }
    },
    "/network/latest-block": {
      "get": {
        "operationId": "NetworkController_getLatestBlock",
        "summary": "Get the latest block",
        "description": "This endpoint will provide the latest block number",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Latest block number that has been added to the chain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkBlockModel"
                }
              }
            }
          }
        },
        "tags": [
          "network"
        ]
      }
    },
    "/assets/{ticker}/metadata": {
      "get": {
        "operationId": "MetadataController_getMetadata",
        "summary": "Fetch an Asset's Metadata",
        "description": "This endpoint retrieves all the Metadata entries for a given Asset",
        "parameters": [
          {
            "name": "ticker",
            "required": true,
            "in": "path",
            "description": "The ticker of the Asset whose metadata are to be fetched",
            "example": "TICKER",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Metadata entries distinguished by id, type and ticker",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResultsModel"
                    },
                    {
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetadataEntryModel"
                          },
                          "description": "List of Metadata entries distinguished by id, type and ticker"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "asset",
          "metadata"
        ]
      }
    },
    "/assets/{ticker}/metadata/{type}/{id}": {
      "get": {
        "operationId": "MetadataController_getSingleMetadata",
        "summary": "Fetch a specific Metadata entry for any Asset",
        "description": "This endpoint retrieves the details of an Asset Metadata entry by its type and ID",
        "parameters": [
          {
            "name": "ticker",
            "required": true,
            "in": "path",
            "description": "The ticker of the Asset whose metadata is to be fetched",
            "example": "TICKER",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "path",
            "description": "The type of Asset Metadata to be filtered",
            "example": "Local",
            "schema": {
              "type": "string",
              "enum": [
                "Local",
                "Global"
              ]
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of Asset Metadata to be filtered",
            "example": "1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of an Asset Metadata including name, specs and value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataDetailsModel"
                }
              }
            }
          },
          "404": {
            "description": "Asset Metadata does not exists"
          }
        },
        "tags": [
          "asset",
          "metadata"
        ]
      }
    },
    "/assets/{ticker}/metadata/create": {},
    "/assets/{ticker}/metadata/{type}/{id}/set": {},
    "/ticker-reservations/reserve-ticker": {},
    "/ticker-reservations/{ticker}": {
      "get": {
        "operationId": "TickerReservationsController_getDetails",
        "summary": "Get ticker reservation details",
        "description": "This endpoint returns details of ticker reservation",
        "parameters": [
          {
            "name": "ticker",
            "required": true,
            "in": "path",
            "description": "Ticker whose details are to be fetched",
            "example": "TICKER",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the ticker reservation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TickerReservationModel"
                }
              }
            }
          }
        },
        "tags": [
          "ticker-reservations"
        ]
      }
    },
    "/ticker-reservations/{ticker}/transfer-ownership": {},
    "/ticker-reservations/{ticker}/extend": {},
    "/identities/{did}": {
      "get": {
        "operationId": "IdentitiesController_getIdentityDetails",
        "summary": "Get Identity details",
        "description": "This endpoint will allow you to give the basic details of an Identity",
        "parameters": [
          {
            "name": "did",
            "required": true,
            "in": "path",
            "description": "The DID of the Identity whose details are to be fetched",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns basic details of the Identity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityModel"
                }
              }
            }
          }
        },
        "tags": [
          "identities"
        ]
      }
    },
    "/identities/{did}/pending-authorizations": {
      "get": {
        "operationId": "IdentitiesController_getPendingAuthorizations",
        "summary": "Get pending Authorizations received by an Identity",
        "description": "This endpoint will provide list of all the pending Authorizations received by an Identity",
        "parameters": [
          {
            "name": "did",
            "required": true,
            "in": "path",
            "description": "The DID of the Identity whose pending Authorizations are to be fetched",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Authorization type to be filtered",
            "schema": {
              "enum": [
                "AttestPrimaryKeyRotation",
                "RotatePrimaryKey",
                "TransferTicker",
                "AddMultiSigSigner",
                "TransferAssetOwnership",
                "JoinIdentity",
                "PortfolioCustody",
                "BecomeAgent",
                "AddRelayerPayingKey",
                "RotatePrimaryKeyToSecondary"
              ],
              "type": "string"
            }
          },
          {
            "name": "includeExpired",
            "required": false,
            "in": "query",
            "description": "Indicates whether to include expired authorizations or not. Defaults to true",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all pending Authorizations for which the given Identity is either the issuer or the target",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingAuthorizationsModel"
                }
              }
            }
          }
        },
        "tags": [
          "identities",
          "authorizations"
        ]
      }
    },
    "/identities/{did}/pending-authorizations/{id}": {
      "get": {
        "operationId": "IdentitiesController_getPendingAuthorization",
        "summary": "Get a pending Authorization",
        "description": "This endpoint will return a specific Authorization issued by or targeting an Identity",
        "parameters": [
          {
            "name": "did",
            "required": true,
            "in": "path",
            "description": "The DID of the issuer or target Identity of the Authorization being fetched",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the Authorization to be fetched",
            "example": "1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the Authorization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationRequestModel"
                }
              }
            }
          }
        },
        "tags": [
          "identities",
          "authorizations"
        ]
      }
    },
    "/identities/{did}/assets": {
      "get": {
        "operationId": "IdentitiesController_getAssets",
        "summary": "Fetch all Assets owned by an Identity",
        "parameters": [
          {
            "name": "did",
            "required": true,
            "in": "path",
            "description": "The DID of the Identity whose Assets are to be fetched",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResultsModel"
                    },
                    {
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "FOO_TICKER",
                            "BAR_TICKER",
                            "BAZ_TICKER"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "identities",
          "assets"
        ]
      }
    },
    "/identities/{did}/held-assets": {
      "get": {
        "operationId": "IdentitiesController_getHeldAssets",
        "summary": "Fetch all Assets held by an Identity",
        "description": "This endpoint returns a list of all Assets which were held at one point by the given Identity. This requires Polymesh GraphQL Middleware Service",
        "parameters": [
          {
            "name": "did",
            "required": true,
            "in": "path",
            "description": "The DID of the Identity for which held Assets are to be fetched",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all the held Assets",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResultsModel"
                    },
                    {
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "FOO_TICKER",
                            "BAR_TICKER",
                            "BAZ_TICKER"
                          ],
                          "description": "List of all the held Assets"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "identities",
          "assets"
        ]
      }
    },
    "/identities/{did}/pending-instructions": {
      "get": {
        "operationId": "IdentitiesController_getPendingInstructions",
        "summary": "Fetch all pending settlement Instructions where an Identity is involved",
        "parameters": [
          {
            "name": "did",
            "required": true,
            "in": "path",
            "description": "The DID of the Identity whose pending settlement Instructions are to be fetched",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of IDs of all pending Instructions",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResultsModel"
                    },
                    {
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "123",
                            "456",
                            "789"
                          ],
                          "description": "List of IDs of all pending Instructions"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "identities",
          "settlements",
          "instructions"
        ]
      }
    },
    "/identities/{did}/venues": {
      "get": {
        "operationId": "IdentitiesController_getVenues",
        "summary": "Get all Venues owned by an Identity",
        "description": "This endpoint will provide list of venues for an identity",
        "parameters": [
          {
            "name": "did",
            "required": true,
            "in": "path",
            "description": "The DID of the Identity whose Venues are to be fetched",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of IDs of all owned Venues",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResultsModel"
                    },
                    {
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "123",
                            "456",
                            "789"
                          ],
                          "description": "List of IDs of all owned Venues"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "identities",
          "settlements"
        ]
      }
    },
    "/identities/{did}/issued-claims": {
      "get": {
        "operationId": "IdentitiesController_getIssuedClaims",
        "summary": "Get all issued Claims",
        "description": "This endpoint will provide a list of all the Claims issued by an Identity",
        "parameters": [
          {
            "name": "did",
            "required": true,
            "in": "path",
            "description": "The DID of the Identity whose issued Claims are to be fetched",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "required": false,
            "in": "query",
            "description": "The number of Claims to be fetched",
            "example": "10",
            "schema": {
              "default": "10",
              "type": "string"
            }
          },
          {
            "name": "start",
            "required": false,
            "in": "query",
            "description": "Start index from which Claims are to be fetched",
            "example": "0",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeExpired",
            "required": false,
            "in": "query",
            "description": "Indicates whether to include expired Claims or not. Defaults to true",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of issued Claims for the given DID",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResultsModel"
                    },
                    {
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ClaimModel"
                          },
                          "description": "List of issued Claims for the given DID"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "identities",
          "claims"
        ]
      }
    },
    "/identities/{did}/associated-claims": {
      "get": {
        "operationId": "IdentitiesController_getAssociatedClaims",
        "summary": "Get all Claims targeting an Identity",
        "description": "This endpoint will provide a list of all the Claims made about an Identity",
        "parameters": [
          {
            "name": "did",
            "required": true,
            "in": "path",
            "description": "The DID of the Identity whose associated Claims are to be fetched",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "required": false,
            "in": "query",
            "description": "The number of Claims to be fetched",
            "example": "10",
            "schema": {
              "default": "10",
              "type": "string"
            }
          },
          {
            "name": "start",
            "required": false,
            "in": "query",
            "description": "Start index from which Claims are to be fetched",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeExpired",
            "required": false,
            "in": "query",
            "description": "Indicates whether to include expired Claims or not. Defaults to true",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "name": "claimTypes",
            "required": false,
            "in": "query",
            "description": "Claim types for filtering associated Claims",
            "example": [
              "Accredited",
              "CustomerDueDiligence"
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Accredited",
                  "Affiliate",
                  "BuyLockup",
                  "SellLockup",
                  "CustomerDueDiligence",
                  "KnowYourCustomer",
                  "Jurisdiction",
                  "Exempted",
                  "Blocked",
                  "InvestorUniqueness",
                  "NoType",
                  "NoData",
                  "InvestorUniquenessV2"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of associated Claims for the given DID",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResultsModel"
                    },
                    {
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ClaimModel"
                          },
                          "description": "List of associated Claims for the given DID"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "identities",
          "claims"
        ]
      }
    },
    "/identities/{did}/trusting-assets": {
      "get": {
        "operationId": "IdentitiesController_getTrustingAssets",
        "summary": "Fetch all Assets for which an Identity is a trusted Claim Issuer",
        "parameters": [
          {
            "name": "did",
            "required": true,
            "in": "path",
            "description": "The DID of the Claim Issuer for which the Assets are to be fetched",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Assets for which the Identity is a trusted Claim Issuer",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResultsModel"
                    },
                    {
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "SOME_TICKER",
                            "RANDOM_TICKER"
                          ],
                          "description": "List of Assets for which the Identity is a trusted Claim Issuer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "identities",
          "assets"
        ]
      }
    },
    "/identities/secondary-accounts/invite": {},
    "/identities/{did}/ticker-reservations": {
      "get": {
        "operationId": "IdentitiesController_getTickerReservations",
        "summary": "Fetch all tickers reserved by an Identity",
        "description": "This endpoint provides all the tickers currently reserved by an Identity. This doesn't include Assets that have already been created. Tickers with unreadable characters in them will be left out",
        "parameters": [
          {
            "name": "did",
            "required": true,
            "in": "path",
            "description": "The DID of the Identity whose reserved tickers are to be fetched",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tickers",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResultsModel"
                    },
                    {
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "SOME_TICKER",
                            "RANDOM_TICKER"
                          ],
                          "description": "List of tickers"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "identities",
          "ticker-reservations"
        ]
      }
    },
    "/identities/mock-cdd": {},
    "/identities/{did}/cdd-claims": {
      "get": {
        "operationId": "IdentitiesController_getCddClaims",
        "summary": "Fetch all CDD claims for an Identity",
        "description": "This endpoint will fetch the list of CDD claims for a target DID",
        "parameters": [
          {
            "name": "did",
            "required": true,
            "in": "path",
            "description": "The DID of the Identity whose CDD claims are to be fetched",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeExpired",
            "required": false,
            "in": "query",
            "description": "Indicates whether to include expired CDD claims or not. Defaults to true",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of CDD claims for the target DID",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResultsModel"
                    },
                    {
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/ClaimModel-Omit-claim"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "claim": {
                                    "$ref": "#/components/schemas/CddClaimModel"
                                  }
                                }
                              }
                            ]
                          },
                          "description": "List of CDD claims for the target DID"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "identities",
          "claims"
        ]
      }
    },
    "/identities/{did}/claim-scopes": {
      "get": {
        "operationId": "IdentitiesController_getClaimScopes",
        "summary": "Fetch all claim scopes for an Identity",
        "description": "This endpoint will fetch all scopes in which claims have been made for the given DID.",
        "parameters": [
          {
            "name": "did",
            "required": true,
            "in": "path",
            "description": "The DID of the Identity whose claim scopes are to be fetched",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of claim scopes",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResultsModel"
                    },
                    {
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ClaimScopeModel"
                          },
                          "description": "List of claim scopes"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "identities",
          "claims"
        ]
      }
    },
    "/identities/{did}/investor-uniqueness-claims": {
      "get": {
        "operationId": "IdentitiesController_getInvestorUniquenessClaims",
        "summary": "Retrieve the list of InvestorUniqueness claims for a target Identity",
        "description": "This endpoint will provide a list of all the InvestorUniquenessClaims made about an Identity",
        "parameters": [
          {
            "name": "did",
            "required": true,
            "in": "path",
            "description": "The DID of the Identity for which to fetch InvestorUniquenessClaims",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeExpired",
            "required": false,
            "in": "query",
            "description": "Indicates whether to include expired InvestorUniquenessClaims or not. Defaults to true",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of InvestorUniquenessClaims for the given DID",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResultsModel"
                    },
                    {
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/ClaimModel-Omit-claim"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "claim": {
                                    "$ref": "#/components/schemas/InvestorUniquenessClaimModel"
                                  }
                                }
                              }
                            ]
                          },
                          "description": "List of InvestorUniquenessClaims for the given DID"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "identities",
          "claims"
        ]
      }
    },
    "/instructions/{id}": {
      "get": {
        "operationId": "SettlementsController_getInstruction",
        "summary": "Fetch Instruction details",
        "description": "This endpoint will provide the details of the Instruction",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the Instruction",
            "example": "123",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the Instruction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstructionModel"
                }
              }
            }
          },
          "404": {
            "description": "The Instruction with the given ID was not found"
          }
        },
        "tags": [
          "settlements",
          "instructions"
        ]
      }
    },
    "/venues/{id}/instructions/create": {},
    "/instructions/{id}/affirm": {},
    "/instructions/{id}/reject": {},
    "/instructions/{id}/withdraw": {},
    "/instructions/{id}/reschedule": {},
    "/instructions/{id}/affirmations": {
      "get": {
        "operationId": "SettlementsController_getAffirmations",
        "summary": "List of affirmations",
        "description": "This endpoint will provide the list of all affirmations generated by a Instruction",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the Instruction whose affirmations are to be fetched",
            "example": "123",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "required": false,
            "in": "query",
            "description": "The number of affirmations to be fetched",
            "example": "10",
            "schema": {
              "default": "10",
              "type": "string"
            }
          },
          {
            "name": "start",
            "required": false,
            "in": "query",
            "description": "Start index from which affirmations are to be fetched",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all affirmations related to the target Identity and their current status",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResultsModel"
                    },
                    {
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/InstructionAffirmationModel"
                          },
                          "description": "List of all affirmations related to the target Identity and their current status"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "settlements",
          "instructions"
        ]
      }
    },
    "/venues/{id}": {
      "get": {
        "operationId": "SettlementsController_getVenueDetails",
        "summary": "Fetch details of a Venue",
        "description": "This endpoint will provide the basic details of a Venue",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the Venue whose details are to be fetched",
            "example": "123",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the Venue",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VenueDetailsModel"
                }
              }
            }
          }
        },
        "tags": [
          "settlements",
          "venues"
        ]
      }
    },
    "/venues/create": {},
    "/venues/{id}/modify": {},
    "/leg-validations": {
      "get": {
        "operationId": "SettlementsController_validateLeg",
        "summary": "Check if a Leg meets the transfer requirements",
        "description": "This endpoint will provide transfer breakdown of an Asset transfer",
        "parameters": [
          {
            "name": "amount",
            "required": true,
            "in": "query",
            "description": "Amount of the Asset to be transferred",
            "example": "1000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDid",
            "required": true,
            "in": "query",
            "description": "DID of the sender",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromPortfolio",
            "required": true,
            "in": "query",
            "description": "Portfolio ID of the sender from which Asset is to be transferred. Use 0 for the Default Portfolio",
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDid",
            "required": true,
            "in": "query",
            "description": "DID of the receiver",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toPortfolio",
            "required": true,
            "in": "query",
            "description": "Portfolio ID of the receiver to which Asset is to be transferred. Use 0 for Default Portfolio",
            "example": "2",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asset",
            "required": true,
            "in": "query",
            "description": "Ticker of the Asset to be transferred",
            "example": "TICKER",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Breakdown of every requirement that must be fulfilled for an Asset transfer to be executed successfully, and whether said requirement is met or not",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferBreakdownModel"
                }
              }
            }
          }
        },
        "tags": [
          "settlements",
          "assets"
        ]
      }
    },
    "/authorizations/{id}/accept": {},
    "/authorizations/{id}/remove": {},
    "/accounts/{account}/balance": {
      "get": {
        "operationId": "AccountsController_getAccountBalance",
        "summary": "Get POLYX balance of an Account",
        "description": "This endpoint provides the free, locked and total POLYX balance of an Account",
        "parameters": [
          {
            "name": "account",
            "required": true,
            "in": "path",
            "description": "The Account address whose balance is to be fetched",
            "example": "5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Free, locked and total POLYX balance of the Account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceModel"
                }
              }
            }
          }
        },
        "tags": [
          "accounts"
        ]
      }
    },
    "/accounts/transfer": {},
    "/accounts/{account}/transactions": {
      "get": {
        "operationId": "AccountsController_getTransactionHistory",
        "summary": "Get transaction history of an Account",
        "description": "This endpoint provides a list of transactions signed by the given Account. This requires Polymesh GraphQL Middleware Service",
        "parameters": [
          {
            "name": "account",
            "required": true,
            "in": "path",
            "description": "The Account address whose transaction history is to be fetched",
            "example": "5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blockNumber",
            "required": false,
            "in": "query",
            "description": "Number of the Block",
            "example": "1000000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blockHash",
            "required": false,
            "in": "query",
            "description": "Hash of the Block. Note, this property will be ignored if `blockNumber` is also specified",
            "example": "0x9d05973b0bacdbf26b705358fbcb7085354b1b7836ee1cc54e824810479dccf6",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "required": false,
            "in": "query",
            "description": "Transaction tags to be filtered",
            "example": "asset.registerTicker",
            "schema": {
              "enum": [
                "system.fillBlock",
                "system.remark",
                "system.setHeapPages",
                "system.setCode",
                "system.setCodeWithoutChecks",
                "system.setChangesTrieConfig",
                "system.setStorage",
                "system.killStorage",
                "system.killPrefix",
                "system.remarkWithEvent",
                "system.placeholderFillBlock",
                "babe.reportEquivocation",
                "babe.reportEquivocationUnsigned",
                "babe.planConfigChange",
                "timestamp.set",
                "indices.claim",
                "indices.transfer",
                "indices.free",
                "indices.forceTransfer",
                "indices.freeze",
                "authorship.setUncles",
                "balances.transfer",
                "balances.transferWithMemo",
                "balances.depositBlockRewardReserveBalance",
                "balances.setBalance",
                "balances.forceTransfer",
                "balances.burnAccountBalance",
                "identity.cddRegisterDid",
                "identity.invalidateCddClaims",
                "identity.removeSecondaryKeys",
                "identity.acceptPrimaryKey",
                "identity.changeCddRequirementForMkRotation",
                "identity.joinIdentityAsKey",
                "identity.leaveIdentityAsKey",
                "identity.addClaim",
                "identity.revokeClaim",
                "identity.setPermissionToSigner",
                "identity.legacySetPermissionToSigner",
                "identity.freezeSecondaryKeys",
                "identity.unfreezeSecondaryKeys",
                "identity.addAuthorization",
                "identity.removeAuthorization",
                "identity.addSecondaryKeysWithAuthorization",
                "identity.addInvestorUniquenessClaim",
                "identity.gcAddCddClaim",
                "identity.gcRevokeCddClaim",
                "identity.addInvestorUniquenessClaimV2",
                "identity.revokeClaimByIndex",
                "identity.rotatePrimaryKeyToSecondary",
                "identity.removeSecondaryKeysOld",
                "identity.placeholderLegacySetPermissionToSigner",
                "identity.addSecondaryKeysWithAuthorizationOld",
                "identity.setSecondaryKeyPermissions",
                "identity.registerCustomClaimType",
                "identity.cddRegisterDidWithCdd",
                "cddServiceProviders.setActiveMembersLimit",
                "cddServiceProviders.disableMember",
                "cddServiceProviders.addMember",
                "cddServiceProviders.removeMember",
                "cddServiceProviders.swapMember",
                "cddServiceProviders.resetMembers",
                "cddServiceProviders.abdicateMembership",
                "polymeshCommittee.setVoteThreshold",
                "polymeshCommittee.setReleaseCoordinator",
                "polymeshCommittee.setExpiresAfter",
                "polymeshCommittee.voteOrPropose",
                "polymeshCommittee.vote",
                "committeeMembership.setActiveMembersLimit",
                "committeeMembership.disableMember",
                "committeeMembership.addMember",
                "committeeMembership.removeMember",
                "committeeMembership.swapMember",
                "committeeMembership.resetMembers",
                "committeeMembership.abdicateMembership",
                "technicalCommittee.setVoteThreshold",
                "technicalCommittee.setReleaseCoordinator",
                "technicalCommittee.setExpiresAfter",
                "technicalCommittee.voteOrPropose",
                "technicalCommittee.vote",
                "technicalCommitteeMembership.setActiveMembersLimit",
                "technicalCommitteeMembership.disableMember",
                "technicalCommitteeMembership.addMember",
                "technicalCommitteeMembership.removeMember",
                "technicalCommitteeMembership.swapMember",
                "technicalCommitteeMembership.resetMembers",
                "technicalCommitteeMembership.abdicateMembership",
                "upgradeCommittee.setVoteThreshold",
                "upgradeCommittee.setReleaseCoordinator",
                "upgradeCommittee.setExpiresAfter",
                "upgradeCommittee.voteOrPropose",
                "upgradeCommittee.vote",
                "upgradeCommitteeMembership.setActiveMembersLimit",
                "upgradeCommitteeMembership.disableMember",
                "upgradeCommitteeMembership.addMember",
                "upgradeCommitteeMembership.removeMember",
                "upgradeCommitteeMembership.swapMember",
                "upgradeCommitteeMembership.resetMembers",
                "upgradeCommitteeMembership.abdicateMembership",
                "multiSig.createMultisig",
                "multiSig.createOrApproveProposalAsIdentity",
                "multiSig.createOrApproveProposalAsKey",
                "multiSig.createProposalAsIdentity",
                "multiSig.createProposalAsKey",
                "multiSig.approveAsIdentity",
                "multiSig.approveAsKey",
                "multiSig.rejectAsIdentity",
                "multiSig.rejectAsKey",
                "multiSig.acceptMultisigSignerAsIdentity",
                "multiSig.acceptMultisigSignerAsKey",
                "multiSig.addMultisigSigner",
                "multiSig.removeMultisigSigner",
                "multiSig.addMultisigSignersViaCreator",
                "multiSig.removeMultisigSignersViaCreator",
                "multiSig.changeSigsRequired",
                "multiSig.makeMultisigSigner",
                "multiSig.makeMultisigPrimary",
                "multiSig.executeScheduledProposal",
                "multiSig.makeMultisigSecondary",
                "bridge.changeController",
                "bridge.changeAdmin",
                "bridge.changeTimelock",
                "bridge.freeze",
                "bridge.unfreeze",
                "bridge.changeBridgeLimit",
                "bridge.changeBridgeExempted",
                "bridge.forceHandleBridgeTx",
                "bridge.batchProposeBridgeTx",
                "bridge.proposeBridgeTx",
                "bridge.handleBridgeTx",
                "bridge.freezeTxs",
                "bridge.unfreezeTxs",
                "bridge.handleScheduledBridgeTx",
                "bridge.addFreezeAdmin",
                "bridge.removeFreezeAdmin",
                "bridge.removeTxs",
                "staking.bond",
                "staking.bondExtra",
                "staking.unbond",
                "staking.withdrawUnbonded",
                "staking.validate",
                "staking.nominate",
                "staking.chill",
                "staking.setPayee",
                "staking.setController",
                "staking.setValidatorCount",
                "staking.increaseValidatorCount",
                "staking.scaleValidatorCount",
                "staking.addPermissionedValidator",
                "staking.removePermissionedValidator",
                "staking.validateCddExpiryNominators",
                "staking.setCommissionCap",
                "staking.setMinBondThreshold",
                "staking.forceNoEras",
                "staking.forceNewEra",
                "staking.setInvulnerables",
                "staking.forceUnstake",
                "staking.forceNewEraAlways",
                "staking.cancelDeferredSlash",
                "staking.payoutStakers",
                "staking.rebond",
                "staking.setHistoryDepth",
                "staking.reapStash",
                "staking.submitElectionSolution",
                "staking.submitElectionSolutionUnsigned",
                "staking.payoutStakersBySystem",
                "staking.changeSlashingAllowedFor",
                "staking.updatePermissionedValidatorIntendedCount",
                "staking.chillFromGovernance",
                "session.setKeys",
                "session.purgeKeys",
                "grandpa.reportEquivocation",
                "grandpa.reportEquivocationUnsigned",
                "grandpa.noteStalled",
                "imOnline.heartbeat",
                "sudo.sudo",
                "sudo.sudoUncheckedWeight",
                "sudo.setKey",
                "sudo.sudoAs",
                "asset.registerTicker",
                "asset.acceptTickerTransfer",
                "asset.acceptAssetOwnershipTransfer",
                "asset.createAsset",
                "asset.freeze",
                "asset.unfreeze",
                "asset.renameAsset",
                "asset.issue",
                "asset.redeem",
                "asset.makeDivisible",
                "asset.addDocuments",
                "asset.removeDocuments",
                "asset.setFundingRound",
                "asset.updateIdentifiers",
                "asset.claimClassicTicker",
                "asset.reserveClassicTicker",
                "asset.controllerTransfer",
                "asset.registerCustomAssetType",
                "asset.createAssetWithCustomType",
                "asset.setAssetMetadata",
                "asset.setAssetMetadataDetails",
                "asset.registerAndSetLocalAssetMetadata",
                "asset.registerAssetMetadataLocalType",
                "asset.registerAssetMetadataGlobalType",
                "asset.redeemFromPortfolio",
                "asset.updateAssetType",
                "asset.removeLocalMetadataKey",
                "asset.removeMetadataValue",
                "capitalDistribution.distribute",
                "capitalDistribution.claim",
                "capitalDistribution.pushBenefit",
                "capitalDistribution.reclaim",
                "capitalDistribution.removeDistribution",
                "checkpoint.createCheckpoint",
                "checkpoint.setSchedulesMaxComplexity",
                "checkpoint.createSchedule",
                "checkpoint.removeSchedule",
                "complianceManager.addComplianceRequirement",
                "complianceManager.removeComplianceRequirement",
                "complianceManager.replaceAssetCompliance",
                "complianceManager.resetAssetCompliance",
                "complianceManager.pauseAssetCompliance",
                "complianceManager.resumeAssetCompliance",
                "complianceManager.addDefaultTrustedClaimIssuer",
                "complianceManager.removeDefaultTrustedClaimIssuer",
                "complianceManager.changeComplianceRequirement",
                "corporateAction.setMaxDetailsLength",
                "corporateAction.setDefaultTargets",
                "corporateAction.setDefaultWithholdingTax",
                "corporateAction.setDidWithholdingTax",
                "corporateAction.initiateCorporateAction",
                "corporateAction.linkCaDoc",
                "corporateAction.removeCa",
                "corporateAction.changeRecordDate",
                "corporateAction.initiateCorporateActionAndDistribute",
                "corporateBallot.attachBallot",
                "corporateBallot.vote",
                "corporateBallot.changeEnd",
                "corporateBallot.changeMeta",
                "corporateBallot.changeRcv",
                "corporateBallot.removeBallot",
                "pips.setPruneHistoricalPips",
                "pips.setMinProposalDeposit",
                "pips.setDefaultEnactmentPeriod",
                "pips.setPendingPipExpiry",
                "pips.setMaxPipSkipCount",
                "pips.setActivePipLimit",
                "pips.propose",
                "pips.vote",
                "pips.approveCommitteeProposal",
                "pips.rejectProposal",
                "pips.pruneProposal",
                "pips.rescheduleExecution",
                "pips.clearSnapshot",
                "pips.snapshot",
                "pips.enactSnapshotResults",
                "pips.executeScheduledPip",
                "pips.expireScheduledPip",
                "portfolio.createPortfolio",
                "portfolio.deletePortfolio",
                "portfolio.movePortfolioFunds",
                "portfolio.renamePortfolio",
                "portfolio.quitPortfolioCustody",
                "portfolio.acceptPortfolioCustody",
                "portfolio.movePortfolioFundsV2",
                "protocolFee.changeCoefficient",
                "protocolFee.changeBaseFee",
                "scheduler.schedule",
                "scheduler.cancel",
                "scheduler.scheduleNamed",
                "scheduler.cancelNamed",
                "scheduler.scheduleAfter",
                "scheduler.scheduleNamedAfter",
                "settlement.createVenue",
                "settlement.updateVenueDetails",
                "settlement.updateVenueType",
                "settlement.addInstruction",
                "settlement.addAndAffirmInstruction",
                "settlement.affirmInstruction",
                "settlement.withdrawAffirmation",
                "settlement.rejectInstruction",
                "settlement.affirmWithReceipts",
                "settlement.claimReceipt",
                "settlement.unclaimReceipt",
                "settlement.setVenueFiltering",
                "settlement.allowVenues",
                "settlement.disallowVenues",
                "settlement.changeReceiptValidity",
                "settlement.executeScheduledInstruction",
                "settlement.rescheduleInstruction",
                "settlement.updateVenueSigners",
                "settlement.addInstructionWithMemo",
                "settlement.addAndAffirmInstructionWithMemo",
                "settlement.executeManualInstruction",
                "settlement.placeholderClaimReceipt",
                "settlement.placeholderUnclaimReceipt",
                "settlement.addInstructionWithMemoV2",
                "settlement.addAndAffirmInstructionWithMemoV2",
                "settlement.affirmInstructionV2",
                "settlement.withdrawAffirmationV2",
                "settlement.rejectInstructionV2",
                "settlement.executeScheduledInstructionV2",
                "statistics.addTransferManager",
                "statistics.removeTransferManager",
                "statistics.addExemptedEntities",
                "statistics.removeExemptedEntities",
                "statistics.setAssetTransferCompliance",
                "statistics.setEntitiesExempt",
                "statistics.setActiveAssetStats",
                "statistics.batchUpdateAssetStats",
                "sto.createFundraiser",
                "sto.invest",
                "sto.freezeFundraiser",
                "sto.unfreezeFundraiser",
                "sto.modifyFundraiserWindow",
                "sto.stop",
                "treasury.disbursement",
                "treasury.reimbursement",
                "utility.batch",
                "utility.batchAtomic",
                "utility.batchOptimistic",
                "utility.relayTx",
                "externalAgents.createGroup",
                "externalAgents.setGroupPermissions",
                "externalAgents.removeAgent",
                "externalAgents.abdicate",
                "externalAgents.changeGroup",
                "externalAgents.acceptBecomeAgent",
                "externalAgents.createGroupAndAddAuth",
                "externalAgents.createAndChangeCustomGroup",
                "relayer.setPayingKey",
                "relayer.acceptPayingKey",
                "relayer.removePayingKey",
                "relayer.updatePolyxLimit",
                "relayer.increasePolyxLimit",
                "relayer.decreasePolyxLimit",
                "rewards.claimItnReward",
                "rewards.setItnRewardStatus",
                "testUtils.registerDid",
                "testUtils.mockCddRegisterDid",
                "testUtils.getMyDid",
                "testUtils.getCddOf",
                "polymeshContracts.call",
                "polymeshContracts.instantiateWithCode",
                "polymeshContracts.instantiate",
                "polymeshContracts.uploadCode",
                "polymeshContracts.removeCode",
                "polymeshContracts.instantiateWithCodePerms",
                "polymeshContracts.instantiateWithHashPerms",
                "polymeshContracts.updateCallRuntimeWhitelist",
                "preimage.notePreimage",
                "preimage.unnotePreimage",
                "preimage.requestPreimage",
                "preimage.unrequestPreimage",
                "contracts.call",
                "contracts.instantiateWithCode",
                "contracts.instantiate",
                "contracts.uploadCode",
                "contracts.removeCode",
                "contracts.callOldWeight",
                "contracts.instantiateWithCodeOldWeight",
                "contracts.instantiateOldWeight",
                "contracts.setCode",
                "nft.createNftCollection",
                "nft.issueNft",
                "nft.redeemNft"
              ],
              "type": "string"
            }
          },
          {
            "name": "success",
            "required": false,
            "in": "query",
            "description": "If true, only successful transactions are fetched",
            "example": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "size",
            "required": false,
            "in": "query",
            "description": "Number of transactions to be fetched",
            "example": "10",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "required": false,
            "in": "query",
            "description": "Start index from which transactions are to be fetched",
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field",
            "required": false,
            "in": "query",
            "description": "Name of the transaction field based on which transactions will be sorted. Note, this property will be ignored if `order` is not specified",
            "example": "block_id",
            "schema": {
              "default": "block_id",
              "enum": [
                "block_id",
                "address",
                "module_id",
                "call_id"
              ],
              "type": "string"
            }
          },
          {
            "name": "order",
            "required": false,
            "in": "query",
            "description": "Order in which the transactions will be sorted based on the value of the `field`.  Note, this property will be ignored if `field` is not specified",
            "example": "DESC",
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of transactions signed by the given Account",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResultsModel"
                    },
                    {
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ExtrinsicModel"
                          },
                          "description": "List of transactions signed by the given Account"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "accounts"
        ]
      }
    },
    "/accounts/{account}/permissions": {
      "get": {
        "operationId": "AccountsController_getPermissions",
        "summary": "Get Account Permissions",
        "description": "The endpoint retrieves the Permissions an Account has as a Permissioned Account for its corresponding Identity",
        "parameters": [
          {
            "name": "account",
            "required": true,
            "in": "path",
            "description": "The Account address whose Permissions are to be fetched",
            "example": "5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Permissions of the Account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionsModel"
                }
              }
            }
          },
          "404": {
            "description": "Account is not associated with any Identity"
          }
        },
        "tags": [
          "accounts"
        ]
      }
    },
    "/accounts/{account}/subsidy": {
      "get": {
        "operationId": "AccountsController_getSubsidy",
        "summary": "Get Account Subsidy",
        "description": "The endpoint retrieves the subsidized balance of this Account and the subsidizer Account",
        "parameters": [
          {
            "name": "account",
            "required": true,
            "in": "path",
            "description": "The Account address whose subsidy is to be fetched",
            "example": "5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subsidy details for the Account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubsidyModel"
                }
              }
            }
          },
          "204": {
            "description": "Account is not being subsidized"
          }
        },
        "tags": [
          "accounts"
        ]
      }
    },
    "/accounts/freeze": {},
    "/accounts/unfreeze": {},
    "/accounts/permissions/revoke": {},
    "/accounts/permissions/modify": {},
    "/accounts/treasury": {
      "get": {
        "operationId": "AccountsController_getTreasuryAccount",
        "summary": "Get chain's treasury Account",
        "description": "This endpoint retrieves treasury Account details which holds the accumulated fees used for chain development and can only be accessed through governance",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Details about the treasury Account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountModel"
                }
              }
            }
          }
        },
        "tags": [
          "accounts"
        ]
      }
    },
    "/accounts/subsidy/{subsidizer}/{beneficiary}": {
      "get": {
        "operationId": "SubsidyController_getSubsidy",
        "summary": "Get Account Subsidy",
        "description": "The endpoint retrieves the subsidized balance of this Account and the subsidizer Account",
        "parameters": [
          {
            "name": "beneficiary",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subsidizer",
            "required": true,
            "in": "path",
            "description": "The Account address of the beneficiary",
            "example": "5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subsidy details for the Account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubsidyModel"
                }
              }
            }
          },
          "404": {
            "description": "The Subsidy no longer exists"
          }
        },
        "tags": [
          "accounts",
          "subsidy"
        ]
      }
    },
    "/accounts/subsidy/create": {},
    "/accounts/subsidy/allowance/set": {},
    "/accounts/subsidy/allowance/increase": {},
    "/accounts/subsidy/allowance/decrease": {},
    "/accounts/subsidy/quit": {},
    "/identities/{did}/portfolios": {
      "get": {
        "operationId": "PortfoliosController_getPortfolios",
        "summary": "Get all Portfolios of an Identity",
        "description": "This endpoint will provide list of all the Portfolios of an Identity",
        "parameters": [
          {
            "name": "did",
            "required": true,
            "in": "path",
            "description": "The DID of the Identity whose Portfolios are to be fetched",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the list of all Portfolios of the given Identity",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResultsModel"
                    },
                    {
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PortfolioModel"
                          },
                          "description": "Return the list of all Portfolios of the given Identity"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "portfolios"
        ]
      }
    },
    "/identities/{did}/portfolios/move-assets": {},
    "/portfolios/create": {},
    "/identities/{did}/portfolios/{id}/delete": {},
    "/identities/{did}/portfolios/{id}/modify-name": {},
    "/identities/{did}/custodied-portfolios": {
      "get": {
        "operationId": "PortfoliosController_getCustodiedPortfolios",
        "summary": "Get all custodied Portfolios of an Identity",
        "description": "This endpoint will provide list of all the custodied Portfolios of an Identity",
        "parameters": [
          {
            "name": "did",
            "required": true,
            "in": "path",
            "description": "The DID of the Identity whose custodied Portfolios are to be fetched",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of all custodied Portfolios of the given Identity",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResultsModel"
                    },
                    {
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PortfolioIdentifierModel"
                          },
                          "description": "Returns the list of all custodied Portfolios of the given Identity"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "portfolios"
        ]
      }
    },
    "/identities/{did}/portfolios/{id}": {
      "get": {
        "operationId": "PortfoliosController_getPortfolio",
        "summary": "Get details of a Portfolio for an Identity",
        "description": "This endpoint will provide details for the provided Portfolio of an Identity",
        "parameters": [
          {
            "name": "did",
            "required": true,
            "in": "path",
            "description": "The DID of the Identity whose Portfolio details are to be fetched",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the portfolio for which details are to be fetched. Use 0 for default Portfolio",
            "example": "1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Portfolio details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioModel"
                }
              }
            }
          }
        },
        "tags": [
          "portfolios"
        ]
      }
    },
    "/identities/{did}/portfolios/{id}/custodian": {},
    "/identities/{did}/portfolios/{id}/transactions": {
      "get": {
        "operationId": "PortfoliosController_getTransactionHistory",
        "summary": "Get list of transactions for a Portfolio",
        "description": "This endpoint will provide list of transaction for the provided Portfolio of an Identity",
        "parameters": [
          {
            "name": "did",
            "required": true,
            "in": "path",
            "description": "The DID of the Identity whose Portfolio transactions are to be fetched",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the portfolio for which transactions are to be fetched. Use 0 for the default Portfolio",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account",
            "required": false,
            "in": "query",
            "description": "Account address involved in transactions",
            "example": "5grwXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXx",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ticker",
            "required": false,
            "in": "query",
            "description": "Asset ticker for which the transactions were made",
            "example": "123",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Portfolio transactions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoricSettlementModel"
                }
              }
            }
          },
          "404": {
            "description": "<ul><li>The Portfolio with provided ID was not found</li> <li>The Identity with provided DID was not found</li></ul>"
          }
        },
        "tags": [
          "portfolios"
        ]
      }
    },
    "/identities/{did}/portfolios/{id}/quit-custody": {},
    "/identities/{did}/portfolios/{id}/created-at": {
      "get": {
        "operationId": "PortfoliosController_createdAt",
        "summary": "Get Portfolio creation event data",
        "description": "The endpoint retrieves the identifier data (block number, date and event index) of the event that was emitted when the given Numbered Portfolio was created. This requires Polymesh GraphQL Middleware Service",
        "parameters": [
          {
            "name": "did",
            "required": true,
            "in": "path",
            "description": "The DID of the Identity whose Portfolio creation event is to be fetched",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the portfolio for which Portfolio creation event is to be fetched. Throws an error if default Portfolio (0) details are requested",
            "example": "1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of event where the Numbered Portfolio was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventIdentifierModel"
                }
              }
            }
          },
          "400": {
            "description": "Event details for default Portfolio are requested"
          },
          "404": {
            "description": "<ul><li>The Portfolio doesn't exist</li> <li>The Portfolio hasn't yet been processed by the Middleware</li></ul>"
          }
        },
        "tags": [
          "portfolios"
        ]
      }
    },
    "/claims/add": {},
    "/claims/edit": {},
    "/claims/remove": {},
    "/claims/add-investor-uniqueness": {},
    "/assets/{ticker}/compliance-requirements": {
      "get": {
        "operationId": "ComplianceRequirementsController_getComplianceRequirements",
        "summary": "Fetch Compliance Requirements of an Asset",
        "description": "This endpoint will provide the list of all compliance requirements of an Asset along with Default Trusted Claim Issuers",
        "parameters": [
          {
            "name": "ticker",
            "required": true,
            "in": "path",
            "description": "The ticker of the Asset whose Compliance Requirements are to be fetched",
            "example": "TICKER",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Compliance Requirements of the Asset along with Default Trusted Claim Issuers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplianceRequirementsModel"
                }
              }
            }
          },
          "404": {
            "description": "The Asset was not found"
          }
        },
        "tags": [
          "assets",
          "compliance"
        ]
      }
    },
    "/assets/{ticker}/compliance-requirements/set": {},
    "/assets/{ticker}/compliance-requirements/pause": {},
    "/assets/{ticker}/compliance-requirements/unpause": {},
    "/assets/{ticker}/compliance-requirements/{id}/delete": {},
    "/assets/{ticker}/compliance-requirements/delete": {},
    "/assets/{ticker}/compliance-requirements/add": {},
    "/assets/{ticker}/compliance-requirements/{id}/modify": {},
    "/assets/{ticker}/compliance-requirements/status": {
      "get": {
        "operationId": "ComplianceRequirementsController_areRequirementsPaused",
        "summary": "Check if the requirements are paused",
        "description": "This endpoint checks if the compliance requirements are paused for a given ticker",
        "parameters": [
          {
            "name": "ticker",
            "required": true,
            "in": "path",
            "description": "The ticker of the Asset whose compliance requirements status are to be fetched",
            "example": "TICKER",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Compliance Requirement status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplianceStatusModel"
                }
              }
            }
          },
          "404": {
            "description": "The Asset does not exist"
          }
        },
        "tags": [
          "assets",
          "compliance"
        ]
      }
    },
    "/assets/{ticker}/trusted-claim-issuers": {
      "get": {
        "operationId": "TrustedClaimIssuersController_getTrustedClaimIssuers",
        "summary": "Fetch trusted Claim Issuers of an Asset",
        "description": "This endpoint will provide the list of all default trusted Claim Issuers of an Asset",
        "parameters": [
          {
            "name": "ticker",
            "required": true,
            "in": "path",
            "description": "The ticker of the Asset whose trusted Claim Issuers are to be fetched",
            "example": "TICKER",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of trusted Claim Issuers of the Asset",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResultsModel"
                    },
                    {
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TrustedClaimIssuerModel"
                          },
                          "description": "List of trusted Claim Issuers of the Asset"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "assets",
          "compliance"
        ]
      }
    },
    "/assets/{ticker}/trusted-claim-issuers/set": {},
    "/assets/{ticker}/trusted-claim-issuers/add": {},
    "/assets/{ticker}/trusted-claim-issuers/remove": {},
    "/developer-testing/webhook": {},
    "/developer-testing/create-test-admins": {},
    "/developer-testing/create-test-accounts": {}
  },
  "info": {
    "title": "Polymesh REST API",
    "description": "The Polymesh REST API provides a developer friendly interface with the Polymesh blockchain\nPolymesh is an institutional-grade permissioned blockchain built specifically for regulated assets.\n\nThe API allows you to perform various operations such as:\n\n- Query and manage identity data\n- Interact with corporate actions (e.g., dividends, capital distributions, and other events)\n- Create and manage security tokens\n- Manage asset ownership and transfers\n\nWith this API developers can build applications and integrations for the Polymesh chain in the programming language of their choice",
    "version": "3.1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "schemas": {
      "MetadataSpecModel": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Off-chain specs or documentation link",
            "example": "https://example.com"
          },
          "description": {
            "type": "string",
            "description": "Description of the Metadata type",
            "example": "Some description"
          },
          "typedef": {
            "type": "string",
            "description": "[SCALE](https://wiki.polkadot.network/docs/build-tools-index#scale-codec) encoded `AssetMetadataTypeDef`",
            "example": "https://example.com"
          }
        }
      },
      "GlobalMetadataModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the Global Asset Metadata",
            "example": "1"
          },
          "name": {
            "type": "string",
            "description": "Name of the Global Asset Metadata",
            "example": "Some metadata"
          },
          "specs": {
            "description": "Specs describing the Asset Metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataSpecModel"
              }
            ]
          }
        },
        "required": [
          "id",
          "name",
          "specs"
        ]
      },
      "AssetDetailsModel": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "The DID of the Asset owner",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          },
          "assetType": {
            "type": "string",
            "description": "Type of the Asset",
            "enum": [
              "EquityCommon",
              "EquityPreferred",
              "Commodity",
              "FixedIncome",
              "Reit",
              "Fund",
              "RevenueShareAgreement",
              "StructuredProduct",
              "Derivative",
              "StableCoin"
            ],
            "example": "EquityCommon"
          },
          "name": {
            "type": "string",
            "description": "Name of the Asset",
            "example": "MyAsset"
          },
          "totalSupply": {
            "type": "string",
            "description": "Total supply count of the Asset",
            "example": "1000"
          },
          "isDivisible": {
            "type": "boolean",
            "description": "Indicator to know if Asset is divisible or not",
            "example": "false"
          },
          "securityIdentifiers": {
            "description": "List of Asset's Security Identifiers",
            "example": [
              {
                "type": "Isin",
                "value": "US0000000000"
              }
            ],
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "fundingRound": {
            "type": "string",
            "description": "Current funding round of the Asset",
            "example": "Series A",
            "nullable": true
          },
          "isFrozen": {
            "type": "boolean",
            "description": "Whether transfers are frozen for the Asset",
            "example": "true"
          }
        },
        "required": [
          "owner",
          "assetType",
          "name",
          "totalSupply",
          "isDivisible",
          "securityIdentifiers",
          "fundingRound",
          "isFrozen"
        ]
      },
      "PaginatedResultsModel": {
        "type": "object",
        "properties": {
          "results": {
            "type": "generic array"
          },
          "total": {
            "type": "string",
            "description": "Total number of results possible for paginated output",
            "example": "10"
          },
          "next": {
            "type": "string",
            "description": "Offset start value for the next set of paginated data (null means there is no more data to fetch)",
            "nullable": true
          }
        },
        "required": [
          "results",
          "total",
          "next"
        ]
      },
      "ResultsModel": {
        "type": "object",
        "properties": {
          "results": {
            "type": "generic array"
          }
        },
        "required": [
          "results"
        ]
      },
      "IdentityBalanceModel": {
        "type": "object",
        "properties": {
          "identity": {
            "type": "string",
            "description": "The DID of the Asset Holder",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          },
          "balance": {
            "type": "string",
            "description": "Balance held by the Identity",
            "example": "12345"
          }
        },
        "required": [
          "identity",
          "balance"
        ]
      },
      "AssetDocumentModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the document",
            "example": "Annual report, 2021"
          },
          "uri": {
            "type": "string",
            "description": "URI (Uniform Resource Identifier) of the document",
            "example": "https://example.com/sec/10k-05-23-2021.htm"
          },
          "contentHash": {
            "type": "string",
            "description": "Hash of the document's content. Used to verify the integrity of the document pointed at by the URI",
            "example": "0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
          },
          "type": {
            "type": "string",
            "description": "Type of the document",
            "example": "Private Placement Memorandum"
          },
          "filedAt": {
            "type": "string",
            "description": "Date at which the document was filed",
            "example": "1987-10-13T23:00:00.000Z"
          }
        },
        "required": [
          "name",
          "uri"
        ]
      },
      "AssetDocumentDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the document",
            "example": "Annual report, 2021"
          },
          "uri": {
            "type": "string",
            "description": "URI (Uniform Resource Identifier) of the document",
            "example": "https://example.com/sec/10k-05-23-2021.htm"
          },
          "contentHash": {
            "type": "string",
            "maxLength": 130,
            "pattern": "/^0x.+/",
            "description": "Hash of the document's content. Used to verify the integrity of the document pointed at by the URI",
            "example": "0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
          },
          "type": {
            "type": "string",
            "description": "Type of the document",
            "example": "Private Placement Memorandum"
          },
          "filedAt": {
            "type": "string",
            "description": "Date at which the document was filed",
            "example": "2021-05-22T23:00:00.000Z"
          }
        },
        "required": [
          "name",
          "uri"
        ]
      },
      "SetAssetDocumentsDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "documents": {
            "description": "New list of documents to replace the existing ones",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetDocumentDto"
            }
          }
        },
        "required": [
          "signer",
          "dryRun",
          "documents"
        ]
      },
      "IssueDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "amount": {
            "type": "string",
            "description": "The amount of the Asset to issue",
            "example": "1000"
          }
        },
        "required": [
          "signer",
          "dryRun",
          "amount"
        ]
      },
      "TransactionModel": {
        "type": "object",
        "properties": {
          "blockNumber": {
            "type": "string",
            "description": "Number of the block where the transaction resides (status: `Succeeded`, `Failed`)",
            "example": "123"
          },
          "blockHash": {
            "type": "string",
            "description": "Hash of the block",
            "example": "0x0372a35b1ae2f622142aa8519ce70b0980fb35727fd0348d204dfa280f2f5987"
          },
          "transactionHash": {
            "type": "string",
            "description": "Hash of the transaction",
            "example": "0xe0346b494edcca5a30b12f3ef128e54dfce412dbf5a0202b3e69c926267d1473"
          },
          "type": {
            "type": "string",
            "description": "Indicator to know if the transaction is a batch transaction or not",
            "enum": [
              "single",
              "batch"
            ],
            "example": "single"
          },
          "transactionTag": {
            "type": "string",
            "description": "Transaction type identifier (for UI purposes). The format is <palletName>.<transactionName>",
            "example": "asset.registerTicker"
          }
        },
        "required": [
          "blockNumber",
          "blockHash",
          "transactionHash",
          "type",
          "transactionTag"
        ]
      },
      "BatchTransactionModel": {
        "type": "object",
        "properties": {
          "blockNumber": {
            "type": "string",
            "description": "Number of the block where the transaction resides (status: `Succeeded`, `Failed`)",
            "example": "123"
          },
          "blockHash": {
            "type": "string",
            "description": "Hash of the block",
            "example": "0x0372a35b1ae2f622142aa8519ce70b0980fb35727fd0348d204dfa280f2f5987"
          },
          "transactionHash": {
            "type": "string",
            "description": "Hash of the transaction",
            "example": "0xe0346b494edcca5a30b12f3ef128e54dfce412dbf5a0202b3e69c926267d1473"
          },
          "type": {
            "type": "string",
            "description": "Indicator to know if the transaction is a batch transaction or not",
            "enum": [
              "single",
              "batch"
            ],
            "example": "single"
          },
          "transactionTags": {
            "description": "List of Transaction type identifier (for UI purposes). The format for each identifier is <palletName>.<transactionName>",
            "example": "asset.registerTicker",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "blockNumber",
          "blockHash",
          "transactionHash",
          "type",
          "transactionTags"
        ]
      },
      "FeesModel": {
        "type": "object",
        "properties": {
          "protocol": {
            "type": "string",
            "description": "The amount of POLYX that will be charged for the transaction as protocol fee",
            "example": "0.5"
          },
          "gas": {
            "type": "string",
            "description": "The amount of POLYX that will be charged for the transaction as GAS fee",
            "example": "0.5"
          },
          "total": {
            "type": "string",
            "description": "The total amount of POLYX that will be charged for the transaction",
            "example": "1"
          }
        },
        "required": [
          "protocol",
          "gas",
          "total"
        ]
      },
      "PayingAccountModel": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "string",
            "description": "The balance of the paying account",
            "example": "29996999.366176"
          },
          "type": {
            "type": "string",
            "description": "Paying account type",
            "enum": [
              "Subsidy",
              "Other",
              "Caller"
            ],
            "example": "Caller"
          },
          "address": {
            "type": "string",
            "description": "The paying account address",
            "example": "5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY"
          }
        },
        "required": [
          "balance",
          "type",
          "address"
        ]
      },
      "TransactionDetailsModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Transaction status",
            "enum": [
              "Idle",
              "Unapproved",
              "Running",
              "Rejected",
              "Succeeded",
              "Failed",
              "Aborted"
            ],
            "example": "Idle"
          },
          "fees": {
            "description": "Transaction fees",
            "allOf": [
              {
                "$ref": "#/components/schemas/FeesModel"
              }
            ]
          },
          "supportsSubsidy": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the transaction can be subsidized"
          },
          "payingAccount": {
            "description": "Paying account details",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayingAccountModel"
              }
            ]
          }
        },
        "required": [
          "status",
          "fees",
          "supportsSubsidy",
          "payingAccount"
        ]
      },
      "TransactionQueueModel": {
        "type": "object",
        "properties": {
          "transactions": {
            "description": "List of transactions",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransactionModel"
              },
              {
                "$ref": "#/components/schemas/BatchTransactionModel"
              }
            ],
            "items": {
              "type": "array"
            }
          },
          "details": {
            "description": "Transaction details",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDetailsModel"
            }
          }
        },
        "required": [
          "transactions",
          "details"
        ]
      },
      "NotificationPayloadModel": {
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "number",
            "description": "The ID of the subscription. Events related to the transaction will contain this ID in the payload",
            "example": 1
          },
          "nonce": {
            "type": "number",
            "description": "The nonce for the subscription",
            "example": 0
          },
          "type": {
            "type": "string",
            "description": "The type of event",
            "enum": [
              "transaction.update"
            ]
          },
          "payload": {
            "type": "object",
            "description": "The payload of the transaction subscribed too"
          }
        },
        "required": [
          "subscriptionId",
          "nonce",
          "type",
          "payload"
        ]
      },
      "SecurityIdentifierDto": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "Isin",
              "Cusip",
              "Cins",
              "Lei",
              "Figi"
            ],
            "type": "string",
            "description": "The type of Asset identifier",
            "example": "Isin"
          },
          "value": {
            "type": "string",
            "description": "The identifier",
            "example": "US0846707026"
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "CreateAssetDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "The name of the Asset",
            "example": "Ticker Corp"
          },
          "ticker": {
            "type": "string",
            "description": "The ticker of the Asset. This must already be reserved by the Signer",
            "example": "TICKER"
          },
          "initialSupply": {
            "type": "string",
            "description": "The initial supply count of the Asset",
            "example": "627880"
          },
          "isDivisible": {
            "type": "boolean",
            "description": "Specifies if the Asset can be divided",
            "example": "false"
          },
          "assetType": {
            "type": "string",
            "description": "The type of Asset",
            "enum": [
              "EquityCommon",
              "EquityPreferred",
              "Commodity",
              "FixedIncome",
              "Reit",
              "Fund",
              "RevenueShareAgreement",
              "StructuredProduct",
              "Derivative",
              "StableCoin"
            ],
            "example": "EquityCommon"
          },
          "securityIdentifiers": {
            "description": "List of Asset's Security Identifiers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityIdentifierDto"
            }
          },
          "fundingRound": {
            "type": "string",
            "description": "The current funding round of the Asset",
            "example": "Series A"
          },
          "documents": {
            "description": "Documents related to the Asset",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetDocumentDto"
            }
          }
        },
        "required": [
          "signer",
          "dryRun",
          "name",
          "ticker",
          "isDivisible",
          "assetType"
        ]
      },
      "TransferOwnershipDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "target": {
            "type": "string",
            "description": "DID of the target Identity",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          },
          "expiry": {
            "type": "string",
            "description": "Date at which the authorization request for transfer expires",
            "example": "2021-05-22T23:00:00.000Z"
          }
        },
        "required": [
          "signer",
          "dryRun",
          "target"
        ]
      },
      "SignerModel": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The address associated to the signer",
            "example": "5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV"
          }
        },
        "required": [
          "address"
        ]
      },
      "AuthorizationRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the Authorization Request (used to accept/reject/cancel)",
            "example": "123"
          },
          "expiry": {
            "type": "string",
            "description": "Date at which the Authorization Request expires and can no longer be accepted. A null value means that the Request never expires",
            "example": "1987-10-13T23:00:00.000Z",
            "nullable": true
          },
          "data": {
            "type": "Authorization",
            "description": "Data corresponding to the type of Authorization Request<table><thead><th>Type</th><th>Data</th></thead><tbody><tr><td>Add Relayer Paying Key</td><td>Beneficiary, Relayer, Allowance</td></tr><tr><td>Become Agent</td><td>Permission Group</td></tr><tr><td>Attest Primary Key Rotation</td><td>DID</td></tr><tr><td>Rotate Primary Key</td><td>DID</td></tr><tr><td>Transfer Ticker</td><td>Ticker</td></tr><tr><td>Add MultiSig Signer</td><td>Account</td></tr><tr><td>Transfer Token Ownership</td><td>Ticker</td></tr><tr><td>Join Identity</td><td>DID   </td></tr><tr><td>Portfolio Custody</td><td>Portfolio</td></tr></tbody></table>",
            "examples": {
              "type": "PortfolioCustody",
              "value": {
                "did": "0x0600000000000000000000000000000000000000000000000000000000000000",
                "id": "1"
              }
            }
          },
          "issuer": {
            "type": "string",
            "description": "The DID of the request issuer",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          },
          "target": {
            "description": "Target Identity or Account of the request",
            "allOf": [
              {
                "$ref": "#/components/schemas/SignerModel"
              }
            ]
          }
        },
        "required": [
          "id",
          "expiry",
          "data",
          "issuer",
          "target"
        ]
      },
      "CreatedAuthorizationRequestModel": {
        "type": "object",
        "properties": {
          "transactions": {
            "description": "List of transactions",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransactionModel"
              },
              {
                "$ref": "#/components/schemas/BatchTransactionModel"
              }
            ],
            "items": {
              "type": "array"
            }
          },
          "details": {
            "description": "Transaction details",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDetailsModel"
            }
          },
          "authorizationRequest": {
            "description": "Details of the newly created Authorization Request",
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorizationRequestModel"
              }
            ]
          }
        },
        "required": [
          "transactions",
          "details",
          "authorizationRequest"
        ]
      },
      "RedeemTokensDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "amount": {
            "type": "string",
            "description": "The amount of Asset tokens to be redeemed",
            "example": "100"
          },
          "from": {
            "type": "string",
            "description": "Portfolio number from which the Asset tokens must be redeemed. Use 0 for the Default Portfolio",
            "example": "1"
          }
        },
        "required": [
          "signer",
          "dryRun",
          "amount",
          "from"
        ]
      },
      "TransactionBaseDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          }
        },
        "required": [
          "signer",
          "dryRun"
        ]
      },
      "BigNumber": {
        "type": "object",
        "properties": {}
      },
      "PortfolioDto": {
        "type": "object",
        "properties": {
          "did": {
            "type": "string",
            "description": "The DID of the Portfolio owner",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          },
          "id": {
            "description": "Portfolio number. Use 0 for the Default Portfolio",
            "example": "123",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigNumber"
              }
            ]
          }
        },
        "required": [
          "did",
          "id"
        ]
      },
      "ControllerTransferDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "origin": {
            "description": "Portfolio from which Asset tokens will be transferred",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortfolioDto"
              }
            ]
          },
          "amount": {
            "type": "string",
            "description": "The amount of the Asset tokens to be transferred",
            "example": "1000"
          }
        },
        "required": [
          "signer",
          "dryRun",
          "origin",
          "amount"
        ]
      },
      "EventIdentifierModel": {
        "type": "object",
        "properties": {
          "blockNumber": {
            "type": "string",
            "description": "Number of the block where the event resides",
            "example": "1000000"
          },
          "blockHash": {
            "type": "string",
            "description": "Hash of the block where the event resides",
            "example": "0x9d05973b0bacdbf26b705358fbcb7085354b1b7836ee1cc54e824810479dccf6"
          },
          "blockDate": {
            "type": "string",
            "description": "Date when the block was finalized",
            "example": "1987-10-13T23:00:00.000Z"
          },
          "eventIndex": {
            "type": "string",
            "description": "Index of the event in the block",
            "example": "1"
          }
        },
        "required": [
          "blockNumber",
          "blockHash",
          "blockDate",
          "eventIndex"
        ]
      },
      "AgentOperationModel": {
        "type": "object",
        "properties": {
          "did": {
            "type": "string",
            "description": "DID of the Agent that performed the operations",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          },
          "history": {
            "description": "List of Asset Operation Events that were triggered by the Agent Identity",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventIdentifierModel"
            }
          }
        },
        "required": [
          "did",
          "history"
        ]
      },
      "ExtrinsicDetailsModel": {
        "type": "object",
        "properties": {
          "blockHash": {
            "type": "string",
            "description": "Hash of the block where the transaction resides",
            "example": "0x9d05973b0bacdbf26b705358fbcb7085354b1b7836ee1cc54e824810479dccf6"
          },
          "blockNumber": {
            "type": "string",
            "description": "Number of the block where the transaction resides",
            "example": "1000000"
          },
          "extrinsicIdx": {
            "type": "string",
            "description": "Index of the transaction in the block",
            "example": "1"
          },
          "address": {
            "type": "string",
            "description": "Public key of the signer. Unsigned transactions have no signer, in which case this value is null (example: an enacted governance proposal)",
            "nullable": true,
            "example": "5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY"
          },
          "nonce": {
            "type": "string",
            "description": "Nonce of the transaction. Null for unsigned transactions where address is null",
            "nullable": true,
            "example": "123456"
          },
          "transactionTag": {
            "type": "string",
            "description": "Transaction type identifier (for UI purposes). The format is <palletName>.<transactionName>",
            "enum": [
              "system.fillBlock",
              "system.remark",
              "system.setHeapPages",
              "system.setCode",
              "system.setCodeWithoutChecks",
              "system.setChangesTrieConfig",
              "system.setStorage",
              "system.killStorage",
              "system.killPrefix",
              "system.remarkWithEvent",
              "system.placeholderFillBlock",
              "babe.reportEquivocation",
              "babe.reportEquivocationUnsigned",
              "babe.planConfigChange",
              "timestamp.set",
              "indices.claim",
              "indices.transfer",
              "indices.free",
              "indices.forceTransfer",
              "indices.freeze",
              "authorship.setUncles",
              "balances.transfer",
              "balances.transferWithMemo",
              "balances.depositBlockRewardReserveBalance",
              "balances.setBalance",
              "balances.forceTransfer",
              "balances.burnAccountBalance",
              "identity.cddRegisterDid",
              "identity.invalidateCddClaims",
              "identity.removeSecondaryKeys",
              "identity.acceptPrimaryKey",
              "identity.changeCddRequirementForMkRotation",
              "identity.joinIdentityAsKey",
              "identity.leaveIdentityAsKey",
              "identity.addClaim",
              "identity.revokeClaim",
              "identity.setPermissionToSigner",
              "identity.legacySetPermissionToSigner",
              "identity.freezeSecondaryKeys",
              "identity.unfreezeSecondaryKeys",
              "identity.addAuthorization",
              "identity.removeAuthorization",
              "identity.addSecondaryKeysWithAuthorization",
              "identity.addInvestorUniquenessClaim",
              "identity.gcAddCddClaim",
              "identity.gcRevokeCddClaim",
              "identity.addInvestorUniquenessClaimV2",
              "identity.revokeClaimByIndex",
              "identity.rotatePrimaryKeyToSecondary",
              "identity.removeSecondaryKeysOld",
              "identity.placeholderLegacySetPermissionToSigner",
              "identity.addSecondaryKeysWithAuthorizationOld",
              "identity.setSecondaryKeyPermissions",
              "identity.registerCustomClaimType",
              "identity.cddRegisterDidWithCdd",
              "cddServiceProviders.setActiveMembersLimit",
              "cddServiceProviders.disableMember",
              "cddServiceProviders.addMember",
              "cddServiceProviders.removeMember",
              "cddServiceProviders.swapMember",
              "cddServiceProviders.resetMembers",
              "cddServiceProviders.abdicateMembership",
              "polymeshCommittee.setVoteThreshold",
              "polymeshCommittee.setReleaseCoordinator",
              "polymeshCommittee.setExpiresAfter",
              "polymeshCommittee.voteOrPropose",
              "polymeshCommittee.vote",
              "committeeMembership.setActiveMembersLimit",
              "committeeMembership.disableMember",
              "committeeMembership.addMember",
              "committeeMembership.removeMember",
              "committeeMembership.swapMember",
              "committeeMembership.resetMembers",
              "committeeMembership.abdicateMembership",
              "technicalCommittee.setVoteThreshold",
              "technicalCommittee.setReleaseCoordinator",
              "technicalCommittee.setExpiresAfter",
              "technicalCommittee.voteOrPropose",
              "technicalCommittee.vote",
              "technicalCommitteeMembership.setActiveMembersLimit",
              "technicalCommitteeMembership.disableMember",
              "technicalCommitteeMembership.addMember",
              "technicalCommitteeMembership.removeMember",
              "technicalCommitteeMembership.swapMember",
              "technicalCommitteeMembership.resetMembers",
              "technicalCommitteeMembership.abdicateMembership",
              "upgradeCommittee.setVoteThreshold",
              "upgradeCommittee.setReleaseCoordinator",
              "upgradeCommittee.setExpiresAfter",
              "upgradeCommittee.voteOrPropose",
              "upgradeCommittee.vote",
              "upgradeCommitteeMembership.setActiveMembersLimit",
              "upgradeCommitteeMembership.disableMember",
              "upgradeCommitteeMembership.addMember",
              "upgradeCommitteeMembership.removeMember",
              "upgradeCommitteeMembership.swapMember",
              "upgradeCommitteeMembership.resetMembers",
              "upgradeCommitteeMembership.abdicateMembership",
              "multiSig.createMultisig",
              "multiSig.createOrApproveProposalAsIdentity",
              "multiSig.createOrApproveProposalAsKey",
              "multiSig.createProposalAsIdentity",
              "multiSig.createProposalAsKey",
              "multiSig.approveAsIdentity",
              "multiSig.approveAsKey",
              "multiSig.rejectAsIdentity",
              "multiSig.rejectAsKey",
              "multiSig.acceptMultisigSignerAsIdentity",
              "multiSig.acceptMultisigSignerAsKey",
              "multiSig.addMultisigSigner",
              "multiSig.removeMultisigSigner",
              "multiSig.addMultisigSignersViaCreator",
              "multiSig.removeMultisigSignersViaCreator",
              "multiSig.changeSigsRequired",
              "multiSig.makeMultisigSigner",
              "multiSig.makeMultisigPrimary",
              "multiSig.executeScheduledProposal",
              "multiSig.makeMultisigSecondary",
              "bridge.changeController",
              "bridge.changeAdmin",
              "bridge.changeTimelock",
              "bridge.freeze",
              "bridge.unfreeze",
              "bridge.changeBridgeLimit",
              "bridge.changeBridgeExempted",
              "bridge.forceHandleBridgeTx",
              "bridge.batchProposeBridgeTx",
              "bridge.proposeBridgeTx",
              "bridge.handleBridgeTx",
              "bridge.freezeTxs",
              "bridge.unfreezeTxs",
              "bridge.handleScheduledBridgeTx",
              "bridge.addFreezeAdmin",
              "bridge.removeFreezeAdmin",
              "bridge.removeTxs",
              "staking.bond",
              "staking.bondExtra",
              "staking.unbond",
              "staking.withdrawUnbonded",
              "staking.validate",
              "staking.nominate",
              "staking.chill",
              "staking.setPayee",
              "staking.setController",
              "staking.setValidatorCount",
              "staking.increaseValidatorCount",
              "staking.scaleValidatorCount",
              "staking.addPermissionedValidator",
              "staking.removePermissionedValidator",
              "staking.validateCddExpiryNominators",
              "staking.setCommissionCap",
              "staking.setMinBondThreshold",
              "staking.forceNoEras",
              "staking.forceNewEra",
              "staking.setInvulnerables",
              "staking.forceUnstake",
              "staking.forceNewEraAlways",
              "staking.cancelDeferredSlash",
              "staking.payoutStakers",
              "staking.rebond",
              "staking.setHistoryDepth",
              "staking.reapStash",
              "staking.submitElectionSolution",
              "staking.submitElectionSolutionUnsigned",
              "staking.payoutStakersBySystem",
              "staking.changeSlashingAllowedFor",
              "staking.updatePermissionedValidatorIntendedCount",
              "staking.chillFromGovernance",
              "session.setKeys",
              "session.purgeKeys",
              "grandpa.reportEquivocation",
              "grandpa.reportEquivocationUnsigned",
              "grandpa.noteStalled",
              "imOnline.heartbeat",
              "sudo.sudo",
              "sudo.sudoUncheckedWeight",
              "sudo.setKey",
              "sudo.sudoAs",
              "asset.registerTicker",
              "asset.acceptTickerTransfer",
              "asset.acceptAssetOwnershipTransfer",
              "asset.createAsset",
              "asset.freeze",
              "asset.unfreeze",
              "asset.renameAsset",
              "asset.issue",
              "asset.redeem",
              "asset.makeDivisible",
              "asset.addDocuments",
              "asset.removeDocuments",
              "asset.setFundingRound",
              "asset.updateIdentifiers",
              "asset.claimClassicTicker",
              "asset.reserveClassicTicker",
              "asset.controllerTransfer",
              "asset.registerCustomAssetType",
              "asset.createAssetWithCustomType",
              "asset.setAssetMetadata",
              "asset.setAssetMetadataDetails",
              "asset.registerAndSetLocalAssetMetadata",
              "asset.registerAssetMetadataLocalType",
              "asset.registerAssetMetadataGlobalType",
              "asset.redeemFromPortfolio",
              "asset.updateAssetType",
              "asset.removeLocalMetadataKey",
              "asset.removeMetadataValue",
              "capitalDistribution.distribute",
              "capitalDistribution.claim",
              "capitalDistribution.pushBenefit",
              "capitalDistribution.reclaim",
              "capitalDistribution.removeDistribution",
              "checkpoint.createCheckpoint",
              "checkpoint.setSchedulesMaxComplexity",
              "checkpoint.createSchedule",
              "checkpoint.removeSchedule",
              "complianceManager.addComplianceRequirement",
              "complianceManager.removeComplianceRequirement",
              "complianceManager.replaceAssetCompliance",
              "complianceManager.resetAssetCompliance",
              "complianceManager.pauseAssetCompliance",
              "complianceManager.resumeAssetCompliance",
              "complianceManager.addDefaultTrustedClaimIssuer",
              "complianceManager.removeDefaultTrustedClaimIssuer",
              "complianceManager.changeComplianceRequirement",
              "corporateAction.setMaxDetailsLength",
              "corporateAction.setDefaultTargets",
              "corporateAction.setDefaultWithholdingTax",
              "corporateAction.setDidWithholdingTax",
              "corporateAction.initiateCorporateAction",
              "corporateAction.linkCaDoc",
              "corporateAction.removeCa",
              "corporateAction.changeRecordDate",
              "corporateAction.initiateCorporateActionAndDistribute",
              "corporateBallot.attachBallot",
              "corporateBallot.vote",
              "corporateBallot.changeEnd",
              "corporateBallot.changeMeta",
              "corporateBallot.changeRcv",
              "corporateBallot.removeBallot",
              "pips.setPruneHistoricalPips",
              "pips.setMinProposalDeposit",
              "pips.setDefaultEnactmentPeriod",
              "pips.setPendingPipExpiry",
              "pips.setMaxPipSkipCount",
              "pips.setActivePipLimit",
              "pips.propose",
              "pips.vote",
              "pips.approveCommitteeProposal",
              "pips.rejectProposal",
              "pips.pruneProposal",
              "pips.rescheduleExecution",
              "pips.clearSnapshot",
              "pips.snapshot",
              "pips.enactSnapshotResults",
              "pips.executeScheduledPip",
              "pips.expireScheduledPip",
              "portfolio.createPortfolio",
              "portfolio.deletePortfolio",
              "portfolio.movePortfolioFunds",
              "portfolio.renamePortfolio",
              "portfolio.quitPortfolioCustody",
              "portfolio.acceptPortfolioCustody",
              "portfolio.movePortfolioFundsV2",
              "protocolFee.changeCoefficient",
              "protocolFee.changeBaseFee",
              "scheduler.schedule",
              "scheduler.cancel",
              "scheduler.scheduleNamed",
              "scheduler.cancelNamed",
              "scheduler.scheduleAfter",
              "scheduler.scheduleNamedAfter",
              "settlement.createVenue",
              "settlement.updateVenueDetails",
              "settlement.updateVenueType",
              "settlement.addInstruction",
              "settlement.addAndAffirmInstruction",
              "settlement.affirmInstruction",
              "settlement.withdrawAffirmation",
              "settlement.rejectInstruction",
              "settlement.affirmWithReceipts",
              "settlement.claimReceipt",
              "settlement.unclaimReceipt",
              "settlement.setVenueFiltering",
              "settlement.allowVenues",
              "settlement.disallowVenues",
              "settlement.changeReceiptValidity",
              "settlement.executeScheduledInstruction",
              "settlement.rescheduleInstruction",
              "settlement.updateVenueSigners",
              "settlement.addInstructionWithMemo",
              "settlement.addAndAffirmInstructionWithMemo",
              "settlement.executeManualInstruction",
              "settlement.placeholderClaimReceipt",
              "settlement.placeholderUnclaimReceipt",
              "settlement.addInstructionWithMemoV2",
              "settlement.addAndAffirmInstructionWithMemoV2",
              "settlement.affirmInstructionV2",
              "settlement.withdrawAffirmationV2",
              "settlement.rejectInstructionV2",
              "settlement.executeScheduledInstructionV2",
              "statistics.addTransferManager",
              "statistics.removeTransferManager",
              "statistics.addExemptedEntities",
              "statistics.removeExemptedEntities",
              "statistics.setAssetTransferCompliance",
              "statistics.setEntitiesExempt",
              "statistics.setActiveAssetStats",
              "statistics.batchUpdateAssetStats",
              "sto.createFundraiser",
              "sto.invest",
              "sto.freezeFundraiser",
              "sto.unfreezeFundraiser",
              "sto.modifyFundraiserWindow",
              "sto.stop",
              "treasury.disbursement",
              "treasury.reimbursement",
              "utility.batch",
              "utility.batchAtomic",
              "utility.batchOptimistic",
              "utility.relayTx",
              "externalAgents.createGroup",
              "externalAgents.setGroupPermissions",
              "externalAgents.removeAgent",
              "externalAgents.abdicate",
              "externalAgents.changeGroup",
              "externalAgents.acceptBecomeAgent",
              "externalAgents.createGroupAndAddAuth",
              "externalAgents.createAndChangeCustomGroup",
              "relayer.setPayingKey",
              "relayer.acceptPayingKey",
              "relayer.removePayingKey",
              "relayer.updatePolyxLimit",
              "relayer.increasePolyxLimit",
              "relayer.decreasePolyxLimit",
              "rewards.claimItnReward",
              "rewards.setItnRewardStatus",
              "testUtils.registerDid",
              "testUtils.mockCddRegisterDid",
              "testUtils.getMyDid",
              "testUtils.getCddOf",
              "polymeshContracts.call",
              "polymeshContracts.instantiateWithCode",
              "polymeshContracts.instantiate",
              "polymeshContracts.uploadCode",
              "polymeshContracts.removeCode",
              "polymeshContracts.instantiateWithCodePerms",
              "polymeshContracts.instantiateWithHashPerms",
              "polymeshContracts.updateCallRuntimeWhitelist",
              "preimage.notePreimage",
              "preimage.unnotePreimage",
              "preimage.requestPreimage",
              "preimage.unrequestPreimage",
              "contracts.call",
              "contracts.instantiateWithCode",
              "contracts.instantiate",
              "contracts.uploadCode",
              "contracts.removeCode",
              "contracts.callOldWeight",
              "contracts.instantiateWithCodeOldWeight",
              "contracts.instantiateOldWeight",
              "contracts.setCode",
              "nft.createNftCollection",
              "nft.issueNft",
              "nft.redeemNft"
            ],
            "example": "asset.registerTicker"
          },
          "params": {
            "description": "List of parameters associated with the transaction",
            "example": [
              {
                "name": "ticker",
                "value": "TICKER"
              }
            ],
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "success": {
            "type": "boolean",
            "description": "Indicates whether the transaction was successful or not",
            "example": true
          },
          "specVersionId": {
            "type": "string",
            "description": "Spec version of the chain",
            "example": "3002"
          },
          "extrinsicHash": {
            "type": "string",
            "description": "Hash of the transaction",
            "example": "44b8a09e9647b34d81d9eb40f26c5bb35ea216610a03df71978558ec939d5120"
          },
          "fee": {
            "description": "Fee details for the transaction",
            "allOf": [
              {
                "$ref": "#/components/schemas/FeesModel"
              }
            ]
          }
        },
        "required": [
          "blockHash",
          "blockNumber",
          "extrinsicIdx",
          "address",
          "nonce",
          "transactionTag",
          "params",
          "success",
          "specVersionId",
          "extrinsicHash",
          "fee"
        ]
      },
      "NetworkPropertiesModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Network name",
            "example": "Development"
          },
          "version": {
            "type": "string",
            "description": "Network version number",
            "example": "1"
          }
        },
        "required": [
          "name",
          "version"
        ]
      },
      "NetworkBlockModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Latest Block Id",
            "example": "1"
          }
        },
        "required": [
          "id"
        ]
      },
      "MetadataEntryModel": {
        "type": "object",
        "properties": {
          "asset": {
            "type": "string",
            "description": "The ticker of the Asset for which this is the Metadata for",
            "example": "TICKER"
          },
          "type": {
            "type": "string",
            "description": "The type of metadata represented by this instance",
            "enum": [
              "Local",
              "Global"
            ]
          },
          "id": {
            "type": "string",
            "description": "ID corresponding to defined `type` of Metadata",
            "example": "1"
          }
        },
        "required": [
          "asset",
          "type",
          "id"
        ]
      },
      "MetadataValueModel": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value of the Asset Metadata",
            "example": "Some metadata"
          },
          "expiry": {
            "type": "string",
            "description": "Date at which the Metadata value expires, null if it never expires",
            "example": "2021-05-22T23:00:00.000Z",
            "nullable": true
          },
          "lockStatus": {
            "type": "string",
            "description": "Lock status of Metadata value",
            "enum": [
              "Unlocked",
              "Locked",
              "LockedUntil"
            ],
            "example": "LockedUntil"
          },
          "lockedUntil": {
            "type": "string",
            "description": "Date till which the Metadata value will be locked. This only applies when `status` is `LockedUntil`",
            "example": "2021-05-22T23:00:00.000Z"
          }
        },
        "required": [
          "value",
          "expiry",
          "lockStatus"
        ]
      },
      "MetadataDetailsModel": {
        "type": "object",
        "properties": {
          "asset": {
            "type": "string",
            "description": "The ticker of the Asset for which this is the Metadata for",
            "example": "TICKER"
          },
          "type": {
            "type": "string",
            "description": "The type of metadata represented by this instance",
            "enum": [
              "Local",
              "Global"
            ]
          },
          "id": {
            "type": "string",
            "description": "ID corresponding to defined `type` of Metadata",
            "example": "1"
          },
          "name": {
            "type": "string",
            "description": "Name of the Global Asset Metadata",
            "example": "Some metadata"
          },
          "specs": {
            "description": "Specs describing the Asset Metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataSpecModel"
              }
            ]
          },
          "value": {
            "description": "Asset Metadata value and its details (expiry + lock status). `null` means that value is not yet set",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataValueModel"
              }
            ]
          }
        },
        "required": [
          "asset",
          "type",
          "id",
          "name",
          "specs",
          "value"
        ]
      },
      "MetadataSpecDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Off-chain specs or documentation link",
            "example": "https://example.com"
          },
          "description": {
            "type": "string",
            "description": "Description of the Metadata type",
            "example": "Some description"
          },
          "typedef": {
            "type": "string",
            "description": "[SCALE](https://wiki.polkadot.network/docs/build-tools-index#scale-codec) encoded `AssetMetadataTypeDef`",
            "example": "Some example"
          }
        }
      },
      "MetadataValueDetailsDto": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "string",
            "nullable": true,
            "description": "Date at which the Metadata value expires, null if it never expires",
            "example": "2021-05-22T23:00:00.000Z",
            "default": null
          },
          "lockStatus": {
            "enum": [
              "Unlocked",
              "Locked",
              "LockedUntil"
            ],
            "type": "string",
            "description": "Lock status of Metadata value",
            "example": "LockedUntil"
          },
          "lockedUntil": {
            "type": "string",
            "description": "Date till which the Metadata value will be locked. This is required when `status` is `LockedUntil`",
            "example": "2021-05-22T23:00:00.000Z"
          }
        },
        "required": [
          "expiry",
          "lockStatus"
        ]
      },
      "CreateMetadataDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "Name of the Asset Metadata",
            "example": "Maturity"
          },
          "specs": {
            "description": "Details about the Asset Metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataSpecDto"
              }
            ]
          },
          "value": {
            "type": "string",
            "description": "Value for the Asset Metadata",
            "example": "Some value"
          },
          "details": {
            "description": "Details about the Asset Metadata value",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataValueDetailsDto"
              }
            ]
          }
        },
        "required": [
          "signer",
          "dryRun",
          "name",
          "specs"
        ]
      },
      "CreatedMetadataEntryModel": {
        "type": "object",
        "properties": {
          "transactions": {
            "description": "List of transactions",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransactionModel"
              },
              {
                "$ref": "#/components/schemas/BatchTransactionModel"
              }
            ],
            "items": {
              "type": "array"
            }
          },
          "details": {
            "description": "Transaction details",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDetailsModel"
            }
          },
          "metadata": {
            "description": "Details of the newly created Asset Metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataEntryModel"
              }
            ]
          }
        },
        "required": [
          "transactions",
          "details",
          "metadata"
        ]
      },
      "SetMetadataDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "value": {
            "type": "string",
            "description": "Value for the Asset Metadata",
            "example": "Some value"
          },
          "details": {
            "description": "Details about the Asset Metadata value which includes expiry and lock status of the `value`",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataValueDetailsDto"
              }
            ]
          }
        },
        "required": [
          "signer",
          "dryRun"
        ]
      },
      "ReserveTickerDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "ticker": {
            "type": "string",
            "description": "Ticker to be reserved",
            "example": "TICKER"
          }
        },
        "required": [
          "signer",
          "dryRun",
          "ticker"
        ]
      },
      "TickerReservationModel": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "The DID of the Reservation owner. A null value means the ticker isn't currently reserved",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000",
            "nullable": true
          },
          "expiryDate": {
            "type": "string",
            "description": "Date at which the Reservation expires. A null value means it never expires (permanent Reservation or Asset already launched)",
            "example": "2021-05-22T23:00:00.000Z",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Status of the ticker Reservation",
            "enum": [
              "Free",
              "Reserved",
              "AssetCreated"
            ],
            "example": "Free"
          }
        },
        "required": [
          "owner",
          "expiryDate",
          "status"
        ]
      },
      "ExtendedTickerReservationModel": {
        "type": "object",
        "properties": {
          "transactions": {
            "description": "List of transactions",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransactionModel"
              },
              {
                "$ref": "#/components/schemas/BatchTransactionModel"
              }
            ],
            "items": {
              "type": "array"
            }
          },
          "details": {
            "description": "Transaction details",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDetailsModel"
            }
          },
          "tickerReservation": {
            "description": "Details of the Ticker Reservation",
            "allOf": [
              {
                "$ref": "#/components/schemas/TickerReservationModel"
              }
            ]
          }
        },
        "required": [
          "transactions",
          "details",
          "tickerReservation"
        ]
      },
      "AccountModel": {
        "type": "object",
        "properties": {
          "signerType": {
            "type": "string",
            "description": "Type of the Signer",
            "enum": [
              "Identity",
              "Account"
            ],
            "example": "Account"
          },
          "address": {
            "type": "string",
            "example": "5grwXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXx"
          }
        },
        "required": [
          "signerType",
          "address"
        ]
      },
      "AssetPermissionsModel": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Indicates whether the permissions are inclusive or exclusive",
            "enum": [
              "Include",
              "Exclude"
            ],
            "example": "Include"
          },
          "values": {
            "description": "List of included/excluded Assets",
            "example": [
              "TICKER123456"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "type",
          "values"
        ]
      },
      "PortfolioIdentifierModel": {
        "type": "object",
        "properties": {
          "did": {
            "type": "string",
            "description": "The DID of the Portfolio owner",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          },
          "id": {
            "type": "string",
            "description": "Portfolio number. 0 represents the Default Portfolio",
            "example": "123"
          }
        },
        "required": [
          "did",
          "id"
        ]
      },
      "PortfolioPermissionsModel": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Indicates whether the permissions are inclusive or exclusive",
            "enum": [
              "Include",
              "Exclude"
            ],
            "example": "Include"
          },
          "values": {
            "description": "List of included/excluded Portfolios",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioIdentifierModel"
            }
          }
        },
        "required": [
          "type",
          "values"
        ]
      },
      "TransactionPermissionsModel": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Indicates whether the permissions are inclusive or exclusive",
            "enum": [
              "Include",
              "Exclude"
            ],
            "example": "Include"
          },
          "values": {
            "type": "array",
            "description": "List of included/excluded transactions. A module name (a string without a period separator) represents all the transactions in said module",
            "example": [
              "asset",
              "checkpoint.createCheckpoint"
            ],
            "items": {
              "type": "string",
              "enum": [
                "system",
                "babe",
                "timestamp",
                "indices",
                "authorship",
                "balances",
                "identity",
                "cddServiceProviders",
                "polymeshCommittee",
                "committeeMembership",
                "technicalCommittee",
                "technicalCommitteeMembership",
                "upgradeCommittee",
                "upgradeCommitteeMembership",
                "multiSig",
                "bridge",
                "staking",
                "session",
                "grandpa",
                "imOnline",
                "sudo",
                "asset",
                "capitalDistribution",
                "checkpoint",
                "complianceManager",
                "corporateAction",
                "corporateBallot",
                "pips",
                "portfolio",
                "protocolFee",
                "scheduler",
                "settlement",
                "statistics",
                "sto",
                "treasury",
                "utility",
                "externalAgents",
                "relayer",
                "rewards",
                "testUtils",
                "polymeshContracts",
                "preimage",
                "contracts",
                "nft",
                "system.fillBlock",
                "system.remark",
                "system.setHeapPages",
                "system.setCode",
                "system.setCodeWithoutChecks",
                "system.setChangesTrieConfig",
                "system.setStorage",
                "system.killStorage",
                "system.killPrefix",
                "system.remarkWithEvent",
                "system.placeholderFillBlock",
                "babe.reportEquivocation",
                "babe.reportEquivocationUnsigned",
                "babe.planConfigChange",
                "timestamp.set",
                "indices.claim",
                "indices.transfer",
                "indices.free",
                "indices.forceTransfer",
                "indices.freeze",
                "authorship.setUncles",
                "balances.transfer",
                "balances.transferWithMemo",
                "balances.depositBlockRewardReserveBalance",
                "balances.setBalance",
                "balances.forceTransfer",
                "balances.burnAccountBalance",
                "identity.cddRegisterDid",
                "identity.invalidateCddClaims",
                "identity.removeSecondaryKeys",
                "identity.acceptPrimaryKey",
                "identity.changeCddRequirementForMkRotation",
                "identity.joinIdentityAsKey",
                "identity.leaveIdentityAsKey",
                "identity.addClaim",
                "identity.revokeClaim",
                "identity.setPermissionToSigner",
                "identity.legacySetPermissionToSigner",
                "identity.freezeSecondaryKeys",
                "identity.unfreezeSecondaryKeys",
                "identity.addAuthorization",
                "identity.removeAuthorization",
                "identity.addSecondaryKeysWithAuthorization",
                "identity.addInvestorUniquenessClaim",
                "identity.gcAddCddClaim",
                "identity.gcRevokeCddClaim",
                "identity.addInvestorUniquenessClaimV2",
                "identity.revokeClaimByIndex",
                "identity.rotatePrimaryKeyToSecondary",
                "identity.removeSecondaryKeysOld",
                "identity.placeholderLegacySetPermissionToSigner",
                "identity.addSecondaryKeysWithAuthorizationOld",
                "identity.setSecondaryKeyPermissions",
                "identity.registerCustomClaimType",
                "identity.cddRegisterDidWithCdd",
                "cddServiceProviders.setActiveMembersLimit",
                "cddServiceProviders.disableMember",
                "cddServiceProviders.addMember",
                "cddServiceProviders.removeMember",
                "cddServiceProviders.swapMember",
                "cddServiceProviders.resetMembers",
                "cddServiceProviders.abdicateMembership",
                "polymeshCommittee.setVoteThreshold",
                "polymeshCommittee.setReleaseCoordinator",
                "polymeshCommittee.setExpiresAfter",
                "polymeshCommittee.voteOrPropose",
                "polymeshCommittee.vote",
                "committeeMembership.setActiveMembersLimit",
                "committeeMembership.disableMember",
                "committeeMembership.addMember",
                "committeeMembership.removeMember",
                "committeeMembership.swapMember",
                "committeeMembership.resetMembers",
                "committeeMembership.abdicateMembership",
                "technicalCommittee.setVoteThreshold",
                "technicalCommittee.setReleaseCoordinator",
                "technicalCommittee.setExpiresAfter",
                "technicalCommittee.voteOrPropose",
                "technicalCommittee.vote",
                "technicalCommitteeMembership.setActiveMembersLimit",
                "technicalCommitteeMembership.disableMember",
                "technicalCommitteeMembership.addMember",
                "technicalCommitteeMembership.removeMember",
                "technicalCommitteeMembership.swapMember",
                "technicalCommitteeMembership.resetMembers",
                "technicalCommitteeMembership.abdicateMembership",
                "upgradeCommittee.setVoteThreshold",
                "upgradeCommittee.setReleaseCoordinator",
                "upgradeCommittee.setExpiresAfter",
                "upgradeCommittee.voteOrPropose",
                "upgradeCommittee.vote",
                "upgradeCommitteeMembership.setActiveMembersLimit",
                "upgradeCommitteeMembership.disableMember",
                "upgradeCommitteeMembership.addMember",
                "upgradeCommitteeMembership.removeMember",
                "upgradeCommitteeMembership.swapMember",
                "upgradeCommitteeMembership.resetMembers",
                "upgradeCommitteeMembership.abdicateMembership",
                "multiSig.createMultisig",
                "multiSig.createOrApproveProposalAsIdentity",
                "multiSig.createOrApproveProposalAsKey",
                "multiSig.createProposalAsIdentity",
                "multiSig.createProposalAsKey",
                "multiSig.approveAsIdentity",
                "multiSig.approveAsKey",
                "multiSig.rejectAsIdentity",
                "multiSig.rejectAsKey",
                "multiSig.acceptMultisigSignerAsIdentity",
                "multiSig.acceptMultisigSignerAsKey",
                "multiSig.addMultisigSigner",
                "multiSig.removeMultisigSigner",
                "multiSig.addMultisigSignersViaCreator",
                "multiSig.removeMultisigSignersViaCreator",
                "multiSig.changeSigsRequired",
                "multiSig.makeMultisigSigner",
                "multiSig.makeMultisigPrimary",
                "multiSig.executeScheduledProposal",
                "multiSig.makeMultisigSecondary",
                "bridge.changeController",
                "bridge.changeAdmin",
                "bridge.changeTimelock",
                "bridge.freeze",
                "bridge.unfreeze",
                "bridge.changeBridgeLimit",
                "bridge.changeBridgeExempted",
                "bridge.forceHandleBridgeTx",
                "bridge.batchProposeBridgeTx",
                "bridge.proposeBridgeTx",
                "bridge.handleBridgeTx",
                "bridge.freezeTxs",
                "bridge.unfreezeTxs",
                "bridge.handleScheduledBridgeTx",
                "bridge.addFreezeAdmin",
                "bridge.removeFreezeAdmin",
                "bridge.removeTxs",
                "staking.bond",
                "staking.bondExtra",
                "staking.unbond",
                "staking.withdrawUnbonded",
                "staking.validate",
                "staking.nominate",
                "staking.chill",
                "staking.setPayee",
                "staking.setController",
                "staking.setValidatorCount",
                "staking.increaseValidatorCount",
                "staking.scaleValidatorCount",
                "staking.addPermissionedValidator",
                "staking.removePermissionedValidator",
                "staking.validateCddExpiryNominators",
                "staking.setCommissionCap",
                "staking.setMinBondThreshold",
                "staking.forceNoEras",
                "staking.forceNewEra",
                "staking.setInvulnerables",
                "staking.forceUnstake",
                "staking.forceNewEraAlways",
                "staking.cancelDeferredSlash",
                "staking.payoutStakers",
                "staking.rebond",
                "staking.setHistoryDepth",
                "staking.reapStash",
                "staking.submitElectionSolution",
                "staking.submitElectionSolutionUnsigned",
                "staking.payoutStakersBySystem",
                "staking.changeSlashingAllowedFor",
                "staking.updatePermissionedValidatorIntendedCount",
                "staking.chillFromGovernance",
                "session.setKeys",
                "session.purgeKeys",
                "grandpa.reportEquivocation",
                "grandpa.reportEquivocationUnsigned",
                "grandpa.noteStalled",
                "imOnline.heartbeat",
                "sudo.sudo",
                "sudo.sudoUncheckedWeight",
                "sudo.setKey",
                "sudo.sudoAs",
                "asset.registerTicker",
                "asset.acceptTickerTransfer",
                "asset.acceptAssetOwnershipTransfer",
                "asset.createAsset",
                "asset.freeze",
                "asset.unfreeze",
                "asset.renameAsset",
                "asset.issue",
                "asset.redeem",
                "asset.makeDivisible",
                "asset.addDocuments",
                "asset.removeDocuments",
                "asset.setFundingRound",
                "asset.updateIdentifiers",
                "asset.claimClassicTicker",
                "asset.reserveClassicTicker",
                "asset.controllerTransfer",
                "asset.registerCustomAssetType",
                "asset.createAssetWithCustomType",
                "asset.setAssetMetadata",
                "asset.setAssetMetadataDetails",
                "asset.registerAndSetLocalAssetMetadata",
                "asset.registerAssetMetadataLocalType",
                "asset.registerAssetMetadataGlobalType",
                "asset.redeemFromPortfolio",
                "asset.updateAssetType",
                "asset.removeLocalMetadataKey",
                "asset.removeMetadataValue",
                "capitalDistribution.distribute",
                "capitalDistribution.claim",
                "capitalDistribution.pushBenefit",
                "capitalDistribution.reclaim",
                "capitalDistribution.removeDistribution",
                "checkpoint.createCheckpoint",
                "checkpoint.setSchedulesMaxComplexity",
                "checkpoint.createSchedule",
                "checkpoint.removeSchedule",
                "complianceManager.addComplianceRequirement",
                "complianceManager.removeComplianceRequirement",
                "complianceManager.replaceAssetCompliance",
                "complianceManager.resetAssetCompliance",
                "complianceManager.pauseAssetCompliance",
                "complianceManager.resumeAssetCompliance",
                "complianceManager.addDefaultTrustedClaimIssuer",
                "complianceManager.removeDefaultTrustedClaimIssuer",
                "complianceManager.changeComplianceRequirement",
                "corporateAction.setMaxDetailsLength",
                "corporateAction.setDefaultTargets",
                "corporateAction.setDefaultWithholdingTax",
                "corporateAction.setDidWithholdingTax",
                "corporateAction.initiateCorporateAction",
                "corporateAction.linkCaDoc",
                "corporateAction.removeCa",
                "corporateAction.changeRecordDate",
                "corporateAction.initiateCorporateActionAndDistribute",
                "corporateBallot.attachBallot",
                "corporateBallot.vote",
                "corporateBallot.changeEnd",
                "corporateBallot.changeMeta",
                "corporateBallot.changeRcv",
                "corporateBallot.removeBallot",
                "pips.setPruneHistoricalPips",
                "pips.setMinProposalDeposit",
                "pips.setDefaultEnactmentPeriod",
                "pips.setPendingPipExpiry",
                "pips.setMaxPipSkipCount",
                "pips.setActivePipLimit",
                "pips.propose",
                "pips.vote",
                "pips.approveCommitteeProposal",
                "pips.rejectProposal",
                "pips.pruneProposal",
                "pips.rescheduleExecution",
                "pips.clearSnapshot",
                "pips.snapshot",
                "pips.enactSnapshotResults",
                "pips.executeScheduledPip",
                "pips.expireScheduledPip",
                "portfolio.createPortfolio",
                "portfolio.deletePortfolio",
                "portfolio.movePortfolioFunds",
                "portfolio.renamePortfolio",
                "portfolio.quitPortfolioCustody",
                "portfolio.acceptPortfolioCustody",
                "portfolio.movePortfolioFundsV2",
                "protocolFee.changeCoefficient",
                "protocolFee.changeBaseFee",
                "scheduler.schedule",
                "scheduler.cancel",
                "scheduler.scheduleNamed",
                "scheduler.cancelNamed",
                "scheduler.scheduleAfter",
                "scheduler.scheduleNamedAfter",
                "settlement.createVenue",
                "settlement.updateVenueDetails",
                "settlement.updateVenueType",
                "settlement.addInstruction",
                "settlement.addAndAffirmInstruction",
                "settlement.affirmInstruction",
                "settlement.withdrawAffirmation",
                "settlement.rejectInstruction",
                "settlement.affirmWithReceipts",
                "settlement.claimReceipt",
                "settlement.unclaimReceipt",
                "settlement.setVenueFiltering",
                "settlement.allowVenues",
                "settlement.disallowVenues",
                "settlement.changeReceiptValidity",
                "settlement.executeScheduledInstruction",
                "settlement.rescheduleInstruction",
                "settlement.updateVenueSigners",
                "settlement.addInstructionWithMemo",
                "settlement.addAndAffirmInstructionWithMemo",
                "settlement.executeManualInstruction",
                "settlement.placeholderClaimReceipt",
                "settlement.placeholderUnclaimReceipt",
                "settlement.addInstructionWithMemoV2",
                "settlement.addAndAffirmInstructionWithMemoV2",
                "settlement.affirmInstructionV2",
                "settlement.withdrawAffirmationV2",
                "settlement.rejectInstructionV2",
                "settlement.executeScheduledInstructionV2",
                "statistics.addTransferManager",
                "statistics.removeTransferManager",
                "statistics.addExemptedEntities",
                "statistics.removeExemptedEntities",
                "statistics.setAssetTransferCompliance",
                "statistics.setEntitiesExempt",
                "statistics.setActiveAssetStats",
                "statistics.batchUpdateAssetStats",
                "sto.createFundraiser",
                "sto.invest",
                "sto.freezeFundraiser",
                "sto.unfreezeFundraiser",
                "sto.modifyFundraiserWindow",
                "sto.stop",
                "treasury.disbursement",
                "treasury.reimbursement",
                "utility.batch",
                "utility.batchAtomic",
                "utility.batchOptimistic",
                "utility.relayTx",
                "externalAgents.createGroup",
                "externalAgents.setGroupPermissions",
                "externalAgents.removeAgent",
                "externalAgents.abdicate",
                "externalAgents.changeGroup",
                "externalAgents.acceptBecomeAgent",
                "externalAgents.createGroupAndAddAuth",
                "externalAgents.createAndChangeCustomGroup",
                "relayer.setPayingKey",
                "relayer.acceptPayingKey",
                "relayer.removePayingKey",
                "relayer.updatePolyxLimit",
                "relayer.increasePolyxLimit",
                "relayer.decreasePolyxLimit",
                "rewards.claimItnReward",
                "rewards.setItnRewardStatus",
                "testUtils.registerDid",
                "testUtils.mockCddRegisterDid",
                "testUtils.getMyDid",
                "testUtils.getCddOf",
                "polymeshContracts.call",
                "polymeshContracts.instantiateWithCode",
                "polymeshContracts.instantiate",
                "polymeshContracts.uploadCode",
                "polymeshContracts.removeCode",
                "polymeshContracts.instantiateWithCodePerms",
                "polymeshContracts.instantiateWithHashPerms",
                "polymeshContracts.updateCallRuntimeWhitelist",
                "preimage.notePreimage",
                "preimage.unnotePreimage",
                "preimage.requestPreimage",
                "preimage.unrequestPreimage",
                "contracts.call",
                "contracts.instantiateWithCode",
                "contracts.instantiate",
                "contracts.uploadCode",
                "contracts.removeCode",
                "contracts.callOldWeight",
                "contracts.instantiateWithCodeOldWeight",
                "contracts.instantiateOldWeight",
                "contracts.setCode",
                "nft.createNftCollection",
                "nft.issueNft",
                "nft.redeemNft"
              ]
            }
          },
          "exceptions": {
            "type": "array",
            "description": "Transactions exempted from inclusion or exclusion. For example, if \"type\" is \"Include\", \"values\" contains \"asset\" and \"exceptions\" includes \"asset.registerTicker\", it means that all transactions in the \"asset\" module are included, EXCEPT for \"registerTicker\"",
            "example": [
              "asset.registerTicker"
            ],
            "items": {
              "type": "string",
              "enum": [
                "system.fillBlock",
                "system.remark",
                "system.setHeapPages",
                "system.setCode",
                "system.setCodeWithoutChecks",
                "system.setChangesTrieConfig",
                "system.setStorage",
                "system.killStorage",
                "system.killPrefix",
                "system.remarkWithEvent",
                "system.placeholderFillBlock",
                "babe.reportEquivocation",
                "babe.reportEquivocationUnsigned",
                "babe.planConfigChange",
                "timestamp.set",
                "indices.claim",
                "indices.transfer",
                "indices.free",
                "indices.forceTransfer",
                "indices.freeze",
                "authorship.setUncles",
                "balances.transfer",
                "balances.transferWithMemo",
                "balances.depositBlockRewardReserveBalance",
                "balances.setBalance",
                "balances.forceTransfer",
                "balances.burnAccountBalance",
                "identity.cddRegisterDid",
                "identity.invalidateCddClaims",
                "identity.removeSecondaryKeys",
                "identity.acceptPrimaryKey",
                "identity.changeCddRequirementForMkRotation",
                "identity.joinIdentityAsKey",
                "identity.leaveIdentityAsKey",
                "identity.addClaim",
                "identity.revokeClaim",
                "identity.setPermissionToSigner",
                "identity.legacySetPermissionToSigner",
                "identity.freezeSecondaryKeys",
                "identity.unfreezeSecondaryKeys",
                "identity.addAuthorization",
                "identity.removeAuthorization",
                "identity.addSecondaryKeysWithAuthorization",
                "identity.addInvestorUniquenessClaim",
                "identity.gcAddCddClaim",
                "identity.gcRevokeCddClaim",
                "identity.addInvestorUniquenessClaimV2",
                "identity.revokeClaimByIndex",
                "identity.rotatePrimaryKeyToSecondary",
                "identity.removeSecondaryKeysOld",
                "identity.placeholderLegacySetPermissionToSigner",
                "identity.addSecondaryKeysWithAuthorizationOld",
                "identity.setSecondaryKeyPermissions",
                "identity.registerCustomClaimType",
                "identity.cddRegisterDidWithCdd",
                "cddServiceProviders.setActiveMembersLimit",
                "cddServiceProviders.disableMember",
                "cddServiceProviders.addMember",
                "cddServiceProviders.removeMember",
                "cddServiceProviders.swapMember",
                "cddServiceProviders.resetMembers",
                "cddServiceProviders.abdicateMembership",
                "polymeshCommittee.setVoteThreshold",
                "polymeshCommittee.setReleaseCoordinator",
                "polymeshCommittee.setExpiresAfter",
                "polymeshCommittee.voteOrPropose",
                "polymeshCommittee.vote",
                "committeeMembership.setActiveMembersLimit",
                "committeeMembership.disableMember",
                "committeeMembership.addMember",
                "committeeMembership.removeMember",
                "committeeMembership.swapMember",
                "committeeMembership.resetMembers",
                "committeeMembership.abdicateMembership",
                "technicalCommittee.setVoteThreshold",
                "technicalCommittee.setReleaseCoordinator",
                "technicalCommittee.setExpiresAfter",
                "technicalCommittee.voteOrPropose",
                "technicalCommittee.vote",
                "technicalCommitteeMembership.setActiveMembersLimit",
                "technicalCommitteeMembership.disableMember",
                "technicalCommitteeMembership.addMember",
                "technicalCommitteeMembership.removeMember",
                "technicalCommitteeMembership.swapMember",
                "technicalCommitteeMembership.resetMembers",
                "technicalCommitteeMembership.abdicateMembership",
                "upgradeCommittee.setVoteThreshold",
                "upgradeCommittee.setReleaseCoordinator",
                "upgradeCommittee.setExpiresAfter",
                "upgradeCommittee.voteOrPropose",
                "upgradeCommittee.vote",
                "upgradeCommitteeMembership.setActiveMembersLimit",
                "upgradeCommitteeMembership.disableMember",
                "upgradeCommitteeMembership.addMember",
                "upgradeCommitteeMembership.removeMember",
                "upgradeCommitteeMembership.swapMember",
                "upgradeCommitteeMembership.resetMembers",
                "upgradeCommitteeMembership.abdicateMembership",
                "multiSig.createMultisig",
                "multiSig.createOrApproveProposalAsIdentity",
                "multiSig.createOrApproveProposalAsKey",
                "multiSig.createProposalAsIdentity",
                "multiSig.createProposalAsKey",
                "multiSig.approveAsIdentity",
                "multiSig.approveAsKey",
                "multiSig.rejectAsIdentity",
                "multiSig.rejectAsKey",
                "multiSig.acceptMultisigSignerAsIdentity",
                "multiSig.acceptMultisigSignerAsKey",
                "multiSig.addMultisigSigner",
                "multiSig.removeMultisigSigner",
                "multiSig.addMultisigSignersViaCreator",
                "multiSig.removeMultisigSignersViaCreator",
                "multiSig.changeSigsRequired",
                "multiSig.makeMultisigSigner",
                "multiSig.makeMultisigPrimary",
                "multiSig.executeScheduledProposal",
                "multiSig.makeMultisigSecondary",
                "bridge.changeController",
                "bridge.changeAdmin",
                "bridge.changeTimelock",
                "bridge.freeze",
                "bridge.unfreeze",
                "bridge.changeBridgeLimit",
                "bridge.changeBridgeExempted",
                "bridge.forceHandleBridgeTx",
                "bridge.batchProposeBridgeTx",
                "bridge.proposeBridgeTx",
                "bridge.handleBridgeTx",
                "bridge.freezeTxs",
                "bridge.unfreezeTxs",
                "bridge.handleScheduledBridgeTx",
                "bridge.addFreezeAdmin",
                "bridge.removeFreezeAdmin",
                "bridge.removeTxs",
                "staking.bond",
                "staking.bondExtra",
                "staking.unbond",
                "staking.withdrawUnbonded",
                "staking.validate",
                "staking.nominate",
                "staking.chill",
                "staking.setPayee",
                "staking.setController",
                "staking.setValidatorCount",
                "staking.increaseValidatorCount",
                "staking.scaleValidatorCount",
                "staking.addPermissionedValidator",
                "staking.removePermissionedValidator",
                "staking.validateCddExpiryNominators",
                "staking.setCommissionCap",
                "staking.setMinBondThreshold",
                "staking.forceNoEras",
                "staking.forceNewEra",
                "staking.setInvulnerables",
                "staking.forceUnstake",
                "staking.forceNewEraAlways",
                "staking.cancelDeferredSlash",
                "staking.payoutStakers",
                "staking.rebond",
                "staking.setHistoryDepth",
                "staking.reapStash",
                "staking.submitElectionSolution",
                "staking.submitElectionSolutionUnsigned",
                "staking.payoutStakersBySystem",
                "staking.changeSlashingAllowedFor",
                "staking.updatePermissionedValidatorIntendedCount",
                "staking.chillFromGovernance",
                "session.setKeys",
                "session.purgeKeys",
                "grandpa.reportEquivocation",
                "grandpa.reportEquivocationUnsigned",
                "grandpa.noteStalled",
                "imOnline.heartbeat",
                "sudo.sudo",
                "sudo.sudoUncheckedWeight",
                "sudo.setKey",
                "sudo.sudoAs",
                "asset.registerTicker",
                "asset.acceptTickerTransfer",
                "asset.acceptAssetOwnershipTransfer",
                "asset.createAsset",
                "asset.freeze",
                "asset.unfreeze",
                "asset.renameAsset",
                "asset.issue",
                "asset.redeem",
                "asset.makeDivisible",
                "asset.addDocuments",
                "asset.removeDocuments",
                "asset.setFundingRound",
                "asset.updateIdentifiers",
                "asset.claimClassicTicker",
                "asset.reserveClassicTicker",
                "asset.controllerTransfer",
                "asset.registerCustomAssetType",
                "asset.createAssetWithCustomType",
                "asset.setAssetMetadata",
                "asset.setAssetMetadataDetails",
                "asset.registerAndSetLocalAssetMetadata",
                "asset.registerAssetMetadataLocalType",
                "asset.registerAssetMetadataGlobalType",
                "asset.redeemFromPortfolio",
                "asset.updateAssetType",
                "asset.removeLocalMetadataKey",
                "asset.removeMetadataValue",
                "capitalDistribution.distribute",
                "capitalDistribution.claim",
                "capitalDistribution.pushBenefit",
                "capitalDistribution.reclaim",
                "capitalDistribution.removeDistribution",
                "checkpoint.createCheckpoint",
                "checkpoint.setSchedulesMaxComplexity",
                "checkpoint.createSchedule",
                "checkpoint.removeSchedule",
                "complianceManager.addComplianceRequirement",
                "complianceManager.removeComplianceRequirement",
                "complianceManager.replaceAssetCompliance",
                "complianceManager.resetAssetCompliance",
                "complianceManager.pauseAssetCompliance",
                "complianceManager.resumeAssetCompliance",
                "complianceManager.addDefaultTrustedClaimIssuer",
                "complianceManager.removeDefaultTrustedClaimIssuer",
                "complianceManager.changeComplianceRequirement",
                "corporateAction.setMaxDetailsLength",
                "corporateAction.setDefaultTargets",
                "corporateAction.setDefaultWithholdingTax",
                "corporateAction.setDidWithholdingTax",
                "corporateAction.initiateCorporateAction",
                "corporateAction.linkCaDoc",
                "corporateAction.removeCa",
                "corporateAction.changeRecordDate",
                "corporateAction.initiateCorporateActionAndDistribute",
                "corporateBallot.attachBallot",
                "corporateBallot.vote",
                "corporateBallot.changeEnd",
                "corporateBallot.changeMeta",
                "corporateBallot.changeRcv",
                "corporateBallot.removeBallot",
                "pips.setPruneHistoricalPips",
                "pips.setMinProposalDeposit",
                "pips.setDefaultEnactmentPeriod",
                "pips.setPendingPipExpiry",
                "pips.setMaxPipSkipCount",
                "pips.setActivePipLimit",
                "pips.propose",
                "pips.vote",
                "pips.approveCommitteeProposal",
                "pips.rejectProposal",
                "pips.pruneProposal",
                "pips.rescheduleExecution",
                "pips.clearSnapshot",
                "pips.snapshot",
                "pips.enactSnapshotResults",
                "pips.executeScheduledPip",
                "pips.expireScheduledPip",
                "portfolio.createPortfolio",
                "portfolio.deletePortfolio",
                "portfolio.movePortfolioFunds",
                "portfolio.renamePortfolio",
                "portfolio.quitPortfolioCustody",
                "portfolio.acceptPortfolioCustody",
                "portfolio.movePortfolioFundsV2",
                "protocolFee.changeCoefficient",
                "protocolFee.changeBaseFee",
                "scheduler.schedule",
                "scheduler.cancel",
                "scheduler.scheduleNamed",
                "scheduler.cancelNamed",
                "scheduler.scheduleAfter",
                "scheduler.scheduleNamedAfter",
                "settlement.createVenue",
                "settlement.updateVenueDetails",
                "settlement.updateVenueType",
                "settlement.addInstruction",
                "settlement.addAndAffirmInstruction",
                "settlement.affirmInstruction",
                "settlement.withdrawAffirmation",
                "settlement.rejectInstruction",
                "settlement.affirmWithReceipts",
                "settlement.claimReceipt",
                "settlement.unclaimReceipt",
                "settlement.setVenueFiltering",
                "settlement.allowVenues",
                "settlement.disallowVenues",
                "settlement.changeReceiptValidity",
                "settlement.executeScheduledInstruction",
                "settlement.rescheduleInstruction",
                "settlement.updateVenueSigners",
                "settlement.addInstructionWithMemo",
                "settlement.addAndAffirmInstructionWithMemo",
                "settlement.executeManualInstruction",
                "settlement.placeholderClaimReceipt",
                "settlement.placeholderUnclaimReceipt",
                "settlement.addInstructionWithMemoV2",
                "settlement.addAndAffirmInstructionWithMemoV2",
                "settlement.affirmInstructionV2",
                "settlement.withdrawAffirmationV2",
                "settlement.rejectInstructionV2",
                "settlement.executeScheduledInstructionV2",
                "statistics.addTransferManager",
                "statistics.removeTransferManager",
                "statistics.addExemptedEntities",
                "statistics.removeExemptedEntities",
                "statistics.setAssetTransferCompliance",
                "statistics.setEntitiesExempt",
                "statistics.setActiveAssetStats",
                "statistics.batchUpdateAssetStats",
                "sto.createFundraiser",
                "sto.invest",
                "sto.freezeFundraiser",
                "sto.unfreezeFundraiser",
                "sto.modifyFundraiserWindow",
                "sto.stop",
                "treasury.disbursement",
                "treasury.reimbursement",
                "utility.batch",
                "utility.batchAtomic",
                "utility.batchOptimistic",
                "utility.relayTx",
                "externalAgents.createGroup",
                "externalAgents.setGroupPermissions",
                "externalAgents.removeAgent",
                "externalAgents.abdicate",
                "externalAgents.changeGroup",
                "externalAgents.acceptBecomeAgent",
                "externalAgents.createGroupAndAddAuth",
                "externalAgents.createAndChangeCustomGroup",
                "relayer.setPayingKey",
                "relayer.acceptPayingKey",
                "relayer.removePayingKey",
                "relayer.updatePolyxLimit",
                "relayer.increasePolyxLimit",
                "relayer.decreasePolyxLimit",
                "rewards.claimItnReward",
                "rewards.setItnRewardStatus",
                "testUtils.registerDid",
                "testUtils.mockCddRegisterDid",
                "testUtils.getMyDid",
                "testUtils.getCddOf",
                "polymeshContracts.call",
                "polymeshContracts.instantiateWithCode",
                "polymeshContracts.instantiate",
                "polymeshContracts.uploadCode",
                "polymeshContracts.removeCode",
                "polymeshContracts.instantiateWithCodePerms",
                "polymeshContracts.instantiateWithHashPerms",
                "polymeshContracts.updateCallRuntimeWhitelist",
                "preimage.notePreimage",
                "preimage.unnotePreimage",
                "preimage.requestPreimage",
                "preimage.unrequestPreimage",
                "contracts.call",
                "contracts.instantiateWithCode",
                "contracts.instantiate",
                "contracts.uploadCode",
                "contracts.removeCode",
                "contracts.callOldWeight",
                "contracts.instantiateWithCodeOldWeight",
                "contracts.instantiateOldWeight",
                "contracts.setCode",
                "nft.createNftCollection",
                "nft.issueNft",
                "nft.redeemNft"
              ]
            }
          }
        },
        "required": [
          "type",
          "values"
        ]
      },
      "PermissionsModel": {
        "type": "object",
        "properties": {
          "assets": {
            "description": "Assets over which the Account has permissions. A null value represents full permissions",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/AssetPermissionsModel"
              }
            ]
          },
          "portfolios": {
            "description": "Portfolios over which the Account has permissions. A null value represents full permissions",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PortfolioPermissionsModel"
              }
            ]
          },
          "transactions": {
            "description": "Transactions that the Account can execute. A null value represents full permissions",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionPermissionsModel"
              }
            ]
          },
          "transactionGroups": {
            "type": "array",
            "description": "Transaction Groups that the Account can execute. Having permissions over a [TxGroup](https://github.com/polymeshassociation/polymesh-sdk/blob/docs/v14/docs/enums/txgroup.md) means having permissions over every TxTag in said group. Note if `transactions` is null, ignore this value",
            "example": [
              "PortfolioManagement"
            ],
            "items": {
              "type": "string",
              "enum": [
                "PortfolioManagement",
                "AssetManagement",
                "AdvancedAssetManagement",
                "Distribution",
                "Issuance",
                "TrustedClaimIssuersManagement",
                "ClaimsManagement",
                "ComplianceRequirementsManagement",
                "CorporateActionsManagement",
                "StoManagement"
              ]
            }
          }
        },
        "required": [
          "assets",
          "portfolios",
          "transactions",
          "transactionGroups"
        ]
      },
      "PermissionedAccountModel": {
        "type": "object",
        "properties": {
          "account": {
            "description": "Account details",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountModel"
              }
            ]
          },
          "permissions": {
            "description": "Permissions present for this Permissioned Account",
            "allOf": [
              {
                "$ref": "#/components/schemas/PermissionsModel"
              }
            ]
          }
        },
        "required": [
          "account",
          "permissions"
        ]
      },
      "IdentityModel": {
        "type": "object",
        "properties": {
          "did": {
            "type": "string",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000",
            "description": "Unique Identity identifier (DID: Decentralized IDentity)"
          },
          "primaryAccount": {
            "description": "Primary Account of the Identity",
            "allOf": [
              {
                "$ref": "#/components/schemas/PermissionedAccountModel"
              }
            ]
          },
          "secondaryAccounts": {
            "description": "Secondary Accounts of the Identity (Up to the first 200)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionedAccountModel"
            }
          },
          "secondaryAccountsFrozen": {
            "type": "boolean",
            "description": "Indicator to know if Secondary Accounts are frozen or not",
            "example": false
          }
        },
        "required": [
          "did",
          "primaryAccount",
          "secondaryAccounts",
          "secondaryAccountsFrozen"
        ]
      },
      "PendingAuthorizationsModel": {
        "type": "object",
        "properties": {
          "received": {
            "description": "List of pending Authorization Requests targeting the specified Identity",
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorizationRequestModel"
              }
            ]
          },
          "sent": {
            "description": "List of pending Authorization Requests issued by the specified Identity",
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorizationRequestModel"
              }
            ]
          }
        },
        "required": [
          "received",
          "sent"
        ]
      },
      "ClaimModel": {
        "type": "object",
        "properties": {
          "target": {
            "type": "string",
            "description": "DID of the target Identity",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          },
          "issuer": {
            "type": "string",
            "description": "DID of the issuer Identity",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          },
          "issuedAt": {
            "type": "string",
            "description": "Date when the Claim was issued",
            "example": "1987-10-13T23:00:00.000Z"
          },
          "expiry": {
            "type": "string",
            "nullable": true,
            "description": "Expiry date of the Claim",
            "example": "1987-10-13T23:00:00.000Z"
          },
          "claim": {
            "type": "object",
            "description": "Details of the Claim containing type and scope",
            "example": {
              "type": "Accredited",
              "scope": {
                "type": "Identity",
                "value": "0x61a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1"
              }
            }
          }
        },
        "required": [
          "target",
          "issuer",
          "issuedAt",
          "expiry",
          "claim"
        ]
      },
      "AssetPermissionsDto": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "Include",
              "Exclude"
            ],
            "type": "string",
            "description": "Indicates whether the permissions are inclusive or exclusive",
            "example": "Include"
          },
          "values": {
            "description": "List of assets to be included or excluded in the permissions",
            "example": [
              "TICKER123456"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "type",
          "values"
        ]
      },
      "PortfolioPermissionsDto": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "Include",
              "Exclude"
            ],
            "type": "string",
            "description": "Indicates whether the permissions are inclusive or exclusive",
            "example": "Include"
          },
          "values": {
            "description": "List of Portfolios to be included or excluded in the permissions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioDto"
            }
          }
        },
        "required": [
          "type",
          "values"
        ]
      },
      "TransactionPermissionsDto": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "Include",
              "Exclude"
            ],
            "type": "string",
            "description": "Indicates whether the permissions are inclusive or exclusive",
            "example": "Include"
          },
          "values": {
            "type": "array",
            "description": "Transactions to be included/excluded",
            "example": [
              "asset",
              "checkpoint.createCheckpoint"
            ],
            "items": {
              "type": "string",
              "enum": [
                "system",
                "babe",
                "timestamp",
                "indices",
                "authorship",
                "balances",
                "identity",
                "cddServiceProviders",
                "polymeshCommittee",
                "committeeMembership",
                "technicalCommittee",
                "technicalCommitteeMembership",
                "upgradeCommittee",
                "upgradeCommitteeMembership",
                "multiSig",
                "bridge",
                "staking",
                "session",
                "grandpa",
                "imOnline",
                "sudo",
                "asset",
                "capitalDistribution",
                "checkpoint",
                "complianceManager",
                "corporateAction",
                "corporateBallot",
                "pips",
                "portfolio",
                "protocolFee",
                "scheduler",
                "settlement",
                "statistics",
                "sto",
                "treasury",
                "utility",
                "externalAgents",
                "relayer",
                "rewards",
                "testUtils",
                "polymeshContracts",
                "preimage",
                "contracts",
                "nft",
                "system.fillBlock",
                "system.remark",
                "system.setHeapPages",
                "system.setCode",
                "system.setCodeWithoutChecks",
                "system.setChangesTrieConfig",
                "system.setStorage",
                "system.killStorage",
                "system.killPrefix",
                "system.remarkWithEvent",
                "system.placeholderFillBlock",
                "babe.reportEquivocation",
                "babe.reportEquivocationUnsigned",
                "babe.planConfigChange",
                "timestamp.set",
                "indices.claim",
                "indices.transfer",
                "indices.free",
                "indices.forceTransfer",
                "indices.freeze",
                "authorship.setUncles",
                "balances.transfer",
                "balances.transferWithMemo",
                "balances.depositBlockRewardReserveBalance",
                "balances.setBalance",
                "balances.forceTransfer",
                "balances.burnAccountBalance",
                "identity.cddRegisterDid",
                "identity.invalidateCddClaims",
                "identity.removeSecondaryKeys",
                "identity.acceptPrimaryKey",
                "identity.changeCddRequirementForMkRotation",
                "identity.joinIdentityAsKey",
                "identity.leaveIdentityAsKey",
                "identity.addClaim",
                "identity.revokeClaim",
                "identity.setPermissionToSigner",
                "identity.legacySetPermissionToSigner",
                "identity.freezeSecondaryKeys",
                "identity.unfreezeSecondaryKeys",
                "identity.addAuthorization",
                "identity.removeAuthorization",
                "identity.addSecondaryKeysWithAuthorization",
                "identity.addInvestorUniquenessClaim",
                "identity.gcAddCddClaim",
                "identity.gcRevokeCddClaim",
                "identity.addInvestorUniquenessClaimV2",
                "identity.revokeClaimByIndex",
                "identity.rotatePrimaryKeyToSecondary",
                "identity.removeSecondaryKeysOld",
                "identity.placeholderLegacySetPermissionToSigner",
                "identity.addSecondaryKeysWithAuthorizationOld",
                "identity.setSecondaryKeyPermissions",
                "identity.registerCustomClaimType",
                "identity.cddRegisterDidWithCdd",
                "cddServiceProviders.setActiveMembersLimit",
                "cddServiceProviders.disableMember",
                "cddServiceProviders.addMember",
                "cddServiceProviders.removeMember",
                "cddServiceProviders.swapMember",
                "cddServiceProviders.resetMembers",
                "cddServiceProviders.abdicateMembership",
                "polymeshCommittee.setVoteThreshold",
                "polymeshCommittee.setReleaseCoordinator",
                "polymeshCommittee.setExpiresAfter",
                "polymeshCommittee.voteOrPropose",
                "polymeshCommittee.vote",
                "committeeMembership.setActiveMembersLimit",
                "committeeMembership.disableMember",
                "committeeMembership.addMember",
                "committeeMembership.removeMember",
                "committeeMembership.swapMember",
                "committeeMembership.resetMembers",
                "committeeMembership.abdicateMembership",
                "technicalCommittee.setVoteThreshold",
                "technicalCommittee.setReleaseCoordinator",
                "technicalCommittee.setExpiresAfter",
                "technicalCommittee.voteOrPropose",
                "technicalCommittee.vote",
                "technicalCommitteeMembership.setActiveMembersLimit",
                "technicalCommitteeMembership.disableMember",
                "technicalCommitteeMembership.addMember",
                "technicalCommitteeMembership.removeMember",
                "technicalCommitteeMembership.swapMember",
                "technicalCommitteeMembership.resetMembers",
                "technicalCommitteeMembership.abdicateMembership",
                "upgradeCommittee.setVoteThreshold",
                "upgradeCommittee.setReleaseCoordinator",
                "upgradeCommittee.setExpiresAfter",
                "upgradeCommittee.voteOrPropose",
                "upgradeCommittee.vote",
                "upgradeCommitteeMembership.setActiveMembersLimit",
                "upgradeCommitteeMembership.disableMember",
                "upgradeCommitteeMembership.addMember",
                "upgradeCommitteeMembership.removeMember",
                "upgradeCommitteeMembership.swapMember",
                "upgradeCommitteeMembership.resetMembers",
                "upgradeCommitteeMembership.abdicateMembership",
                "multiSig.createMultisig",
                "multiSig.createOrApproveProposalAsIdentity",
                "multiSig.createOrApproveProposalAsKey",
                "multiSig.createProposalAsIdentity",
                "multiSig.createProposalAsKey",
                "multiSig.approveAsIdentity",
                "multiSig.approveAsKey",
                "multiSig.rejectAsIdentity",
                "multiSig.rejectAsKey",
                "multiSig.acceptMultisigSignerAsIdentity",
                "multiSig.acceptMultisigSignerAsKey",
                "multiSig.addMultisigSigner",
                "multiSig.removeMultisigSigner",
                "multiSig.addMultisigSignersViaCreator",
                "multiSig.removeMultisigSignersViaCreator",
                "multiSig.changeSigsRequired",
                "multiSig.makeMultisigSigner",
                "multiSig.makeMultisigPrimary",
                "multiSig.executeScheduledProposal",
                "multiSig.makeMultisigSecondary",
                "bridge.changeController",
                "bridge.changeAdmin",
                "bridge.changeTimelock",
                "bridge.freeze",
                "bridge.unfreeze",
                "bridge.changeBridgeLimit",
                "bridge.changeBridgeExempted",
                "bridge.forceHandleBridgeTx",
                "bridge.batchProposeBridgeTx",
                "bridge.proposeBridgeTx",
                "bridge.handleBridgeTx",
                "bridge.freezeTxs",
                "bridge.unfreezeTxs",
                "bridge.handleScheduledBridgeTx",
                "bridge.addFreezeAdmin",
                "bridge.removeFreezeAdmin",
                "bridge.removeTxs",
                "staking.bond",
                "staking.bondExtra",
                "staking.unbond",
                "staking.withdrawUnbonded",
                "staking.validate",
                "staking.nominate",
                "staking.chill",
                "staking.setPayee",
                "staking.setController",
                "staking.setValidatorCount",
                "staking.increaseValidatorCount",
                "staking.scaleValidatorCount",
                "staking.addPermissionedValidator",
                "staking.removePermissionedValidator",
                "staking.validateCddExpiryNominators",
                "staking.setCommissionCap",
                "staking.setMinBondThreshold",
                "staking.forceNoEras",
                "staking.forceNewEra",
                "staking.setInvulnerables",
                "staking.forceUnstake",
                "staking.forceNewEraAlways",
                "staking.cancelDeferredSlash",
                "staking.payoutStakers",
                "staking.rebond",
                "staking.setHistoryDepth",
                "staking.reapStash",
                "staking.submitElectionSolution",
                "staking.submitElectionSolutionUnsigned",
                "staking.payoutStakersBySystem",
                "staking.changeSlashingAllowedFor",
                "staking.updatePermissionedValidatorIntendedCount",
                "staking.chillFromGovernance",
                "session.setKeys",
                "session.purgeKeys",
                "grandpa.reportEquivocation",
                "grandpa.reportEquivocationUnsigned",
                "grandpa.noteStalled",
                "imOnline.heartbeat",
                "sudo.sudo",
                "sudo.sudoUncheckedWeight",
                "sudo.setKey",
                "sudo.sudoAs",
                "asset.registerTicker",
                "asset.acceptTickerTransfer",
                "asset.acceptAssetOwnershipTransfer",
                "asset.createAsset",
                "asset.freeze",
                "asset.unfreeze",
                "asset.renameAsset",
                "asset.issue",
                "asset.redeem",
                "asset.makeDivisible",
                "asset.addDocuments",
                "asset.removeDocuments",
                "asset.setFundingRound",
                "asset.updateIdentifiers",
                "asset.claimClassicTicker",
                "asset.reserveClassicTicker",
                "asset.controllerTransfer",
                "asset.registerCustomAssetType",
                "asset.createAssetWithCustomType",
                "asset.setAssetMetadata",
                "asset.setAssetMetadataDetails",
                "asset.registerAndSetLocalAssetMetadata",
                "asset.registerAssetMetadataLocalType",
                "asset.registerAssetMetadataGlobalType",
                "asset.redeemFromPortfolio",
                "asset.updateAssetType",
                "asset.removeLocalMetadataKey",
                "asset.removeMetadataValue",
                "capitalDistribution.distribute",
                "capitalDistribution.claim",
                "capitalDistribution.pushBenefit",
                "capitalDistribution.reclaim",
                "capitalDistribution.removeDistribution",
                "checkpoint.createCheckpoint",
                "checkpoint.setSchedulesMaxComplexity",
                "checkpoint.createSchedule",
                "checkpoint.removeSchedule",
                "complianceManager.addComplianceRequirement",
                "complianceManager.removeComplianceRequirement",
                "complianceManager.replaceAssetCompliance",
                "complianceManager.resetAssetCompliance",
                "complianceManager.pauseAssetCompliance",
                "complianceManager.resumeAssetCompliance",
                "complianceManager.addDefaultTrustedClaimIssuer",
                "complianceManager.removeDefaultTrustedClaimIssuer",
                "complianceManager.changeComplianceRequirement",
                "corporateAction.setMaxDetailsLength",
                "corporateAction.setDefaultTargets",
                "corporateAction.setDefaultWithholdingTax",
                "corporateAction.setDidWithholdingTax",
                "corporateAction.initiateCorporateAction",
                "corporateAction.linkCaDoc",
                "corporateAction.removeCa",
                "corporateAction.changeRecordDate",
                "corporateAction.initiateCorporateActionAndDistribute",
                "corporateBallot.attachBallot",
                "corporateBallot.vote",
                "corporateBallot.changeEnd",
                "corporateBallot.changeMeta",
                "corporateBallot.changeRcv",
                "corporateBallot.removeBallot",
                "pips.setPruneHistoricalPips",
                "pips.setMinProposalDeposit",
                "pips.setDefaultEnactmentPeriod",
                "pips.setPendingPipExpiry",
                "pips.setMaxPipSkipCount",
                "pips.setActivePipLimit",
                "pips.propose",
                "pips.vote",
                "pips.approveCommitteeProposal",
                "pips.rejectProposal",
                "pips.pruneProposal",
                "pips.rescheduleExecution",
                "pips.clearSnapshot",
                "pips.snapshot",
                "pips.enactSnapshotResults",
                "pips.executeScheduledPip",
                "pips.expireScheduledPip",
                "portfolio.createPortfolio",
                "portfolio.deletePortfolio",
                "portfolio.movePortfolioFunds",
                "portfolio.renamePortfolio",
                "portfolio.quitPortfolioCustody",
                "portfolio.acceptPortfolioCustody",
                "portfolio.movePortfolioFundsV2",
                "protocolFee.changeCoefficient",
                "protocolFee.changeBaseFee",
                "scheduler.schedule",
                "scheduler.cancel",
                "scheduler.scheduleNamed",
                "scheduler.cancelNamed",
                "scheduler.scheduleAfter",
                "scheduler.scheduleNamedAfter",
                "settlement.createVenue",
                "settlement.updateVenueDetails",
                "settlement.updateVenueType",
                "settlement.addInstruction",
                "settlement.addAndAffirmInstruction",
                "settlement.affirmInstruction",
                "settlement.withdrawAffirmation",
                "settlement.rejectInstruction",
                "settlement.affirmWithReceipts",
                "settlement.claimReceipt",
                "settlement.unclaimReceipt",
                "settlement.setVenueFiltering",
                "settlement.allowVenues",
                "settlement.disallowVenues",
                "settlement.changeReceiptValidity",
                "settlement.executeScheduledInstruction",
                "settlement.rescheduleInstruction",
                "settlement.updateVenueSigners",
                "settlement.addInstructionWithMemo",
                "settlement.addAndAffirmInstructionWithMemo",
                "settlement.executeManualInstruction",
                "settlement.placeholderClaimReceipt",
                "settlement.placeholderUnclaimReceipt",
                "settlement.addInstructionWithMemoV2",
                "settlement.addAndAffirmInstructionWithMemoV2",
                "settlement.affirmInstructionV2",
                "settlement.withdrawAffirmationV2",
                "settlement.rejectInstructionV2",
                "settlement.executeScheduledInstructionV2",
                "statistics.addTransferManager",
                "statistics.removeTransferManager",
                "statistics.addExemptedEntities",
                "statistics.removeExemptedEntities",
                "statistics.setAssetTransferCompliance",
                "statistics.setEntitiesExempt",
                "statistics.setActiveAssetStats",
                "statistics.batchUpdateAssetStats",
                "sto.createFundraiser",
                "sto.invest",
                "sto.freezeFundraiser",
                "sto.unfreezeFundraiser",
                "sto.modifyFundraiserWindow",
                "sto.stop",
                "treasury.disbursement",
                "treasury.reimbursement",
                "utility.batch",
                "utility.batchAtomic",
                "utility.batchOptimistic",
                "utility.relayTx",
                "externalAgents.createGroup",
                "externalAgents.setGroupPermissions",
                "externalAgents.removeAgent",
                "externalAgents.abdicate",
                "externalAgents.changeGroup",
                "externalAgents.acceptBecomeAgent",
                "externalAgents.createGroupAndAddAuth",
                "externalAgents.createAndChangeCustomGroup",
                "relayer.setPayingKey",
                "relayer.acceptPayingKey",
                "relayer.removePayingKey",
                "relayer.updatePolyxLimit",
                "relayer.increasePolyxLimit",
                "relayer.decreasePolyxLimit",
                "rewards.claimItnReward",
                "rewards.setItnRewardStatus",
                "testUtils.registerDid",
                "testUtils.mockCddRegisterDid",
                "testUtils.getMyDid",
                "testUtils.getCddOf",
                "polymeshContracts.call",
                "polymeshContracts.instantiateWithCode",
                "polymeshContracts.instantiate",
                "polymeshContracts.uploadCode",
                "polymeshContracts.removeCode",
                "polymeshContracts.instantiateWithCodePerms",
                "polymeshContracts.instantiateWithHashPerms",
                "polymeshContracts.updateCallRuntimeWhitelist",
                "preimage.notePreimage",
                "preimage.unnotePreimage",
                "preimage.requestPreimage",
                "preimage.unrequestPreimage",
                "contracts.call",
                "contracts.instantiateWithCode",
                "contracts.instantiate",
                "contracts.uploadCode",
                "contracts.removeCode",
                "contracts.callOldWeight",
                "contracts.instantiateWithCodeOldWeight",
                "contracts.instantiateOldWeight",
                "contracts.setCode",
                "nft.createNftCollection",
                "nft.issueNft",
                "nft.redeemNft"
              ]
            }
          },
          "exceptions": {
            "type": "array",
            "description": "Transactions to be exempted from inclusion/exclusion. For example, if you wish to exclude the entire `asset` module except for `asset.createAsset`, you would pass `ModuleName.Asset` as part of the `values` array, and `TxTags.asset.CreateAsset` as part of the `exceptions` array",
            "example": [
              "asset.registerTicker"
            ],
            "items": {
              "type": "string",
              "enum": [
                "system.fillBlock",
                "system.remark",
                "system.setHeapPages",
                "system.setCode",
                "system.setCodeWithoutChecks",
                "system.setChangesTrieConfig",
                "system.setStorage",
                "system.killStorage",
                "system.killPrefix",
                "system.remarkWithEvent",
                "system.placeholderFillBlock",
                "babe.reportEquivocation",
                "babe.reportEquivocationUnsigned",
                "babe.planConfigChange",
                "timestamp.set",
                "indices.claim",
                "indices.transfer",
                "indices.free",
                "indices.forceTransfer",
                "indices.freeze",
                "authorship.setUncles",
                "balances.transfer",
                "balances.transferWithMemo",
                "balances.depositBlockRewardReserveBalance",
                "balances.setBalance",
                "balances.forceTransfer",
                "balances.burnAccountBalance",
                "identity.cddRegisterDid",
                "identity.invalidateCddClaims",
                "identity.removeSecondaryKeys",
                "identity.acceptPrimaryKey",
                "identity.changeCddRequirementForMkRotation",
                "identity.joinIdentityAsKey",
                "identity.leaveIdentityAsKey",
                "identity.addClaim",
                "identity.revokeClaim",
                "identity.setPermissionToSigner",
                "identity.legacySetPermissionToSigner",
                "identity.freezeSecondaryKeys",
                "identity.unfreezeSecondaryKeys",
                "identity.addAuthorization",
                "identity.removeAuthorization",
                "identity.addSecondaryKeysWithAuthorization",
                "identity.addInvestorUniquenessClaim",
                "identity.gcAddCddClaim",
                "identity.gcRevokeCddClaim",
                "identity.addInvestorUniquenessClaimV2",
                "identity.revokeClaimByIndex",
                "identity.rotatePrimaryKeyToSecondary",
                "identity.removeSecondaryKeysOld",
                "identity.placeholderLegacySetPermissionToSigner",
                "identity.addSecondaryKeysWithAuthorizationOld",
                "identity.setSecondaryKeyPermissions",
                "identity.registerCustomClaimType",
                "identity.cddRegisterDidWithCdd",
                "cddServiceProviders.setActiveMembersLimit",
                "cddServiceProviders.disableMember",
                "cddServiceProviders.addMember",
                "cddServiceProviders.removeMember",
                "cddServiceProviders.swapMember",
                "cddServiceProviders.resetMembers",
                "cddServiceProviders.abdicateMembership",
                "polymeshCommittee.setVoteThreshold",
                "polymeshCommittee.setReleaseCoordinator",
                "polymeshCommittee.setExpiresAfter",
                "polymeshCommittee.voteOrPropose",
                "polymeshCommittee.vote",
                "committeeMembership.setActiveMembersLimit",
                "committeeMembership.disableMember",
                "committeeMembership.addMember",
                "committeeMembership.removeMember",
                "committeeMembership.swapMember",
                "committeeMembership.resetMembers",
                "committeeMembership.abdicateMembership",
                "technicalCommittee.setVoteThreshold",
                "technicalCommittee.setReleaseCoordinator",
                "technicalCommittee.setExpiresAfter",
                "technicalCommittee.voteOrPropose",
                "technicalCommittee.vote",
                "technicalCommitteeMembership.setActiveMembersLimit",
                "technicalCommitteeMembership.disableMember",
                "technicalCommitteeMembership.addMember",
                "technicalCommitteeMembership.removeMember",
                "technicalCommitteeMembership.swapMember",
                "technicalCommitteeMembership.resetMembers",
                "technicalCommitteeMembership.abdicateMembership",
                "upgradeCommittee.setVoteThreshold",
                "upgradeCommittee.setReleaseCoordinator",
                "upgradeCommittee.setExpiresAfter",
                "upgradeCommittee.voteOrPropose",
                "upgradeCommittee.vote",
                "upgradeCommitteeMembership.setActiveMembersLimit",
                "upgradeCommitteeMembership.disableMember",
                "upgradeCommitteeMembership.addMember",
                "upgradeCommitteeMembership.removeMember",
                "upgradeCommitteeMembership.swapMember",
                "upgradeCommitteeMembership.resetMembers",
                "upgradeCommitteeMembership.abdicateMembership",
                "multiSig.createMultisig",
                "multiSig.createOrApproveProposalAsIdentity",
                "multiSig.createOrApproveProposalAsKey",
                "multiSig.createProposalAsIdentity",
                "multiSig.createProposalAsKey",
                "multiSig.approveAsIdentity",
                "multiSig.approveAsKey",
                "multiSig.rejectAsIdentity",
                "multiSig.rejectAsKey",
                "multiSig.acceptMultisigSignerAsIdentity",
                "multiSig.acceptMultisigSignerAsKey",
                "multiSig.addMultisigSigner",
                "multiSig.removeMultisigSigner",
                "multiSig.addMultisigSignersViaCreator",
                "multiSig.removeMultisigSignersViaCreator",
                "multiSig.changeSigsRequired",
                "multiSig.makeMultisigSigner",
                "multiSig.makeMultisigPrimary",
                "multiSig.executeScheduledProposal",
                "multiSig.makeMultisigSecondary",
                "bridge.changeController",
                "bridge.changeAdmin",
                "bridge.changeTimelock",
                "bridge.freeze",
                "bridge.unfreeze",
                "bridge.changeBridgeLimit",
                "bridge.changeBridgeExempted",
                "bridge.forceHandleBridgeTx",
                "bridge.batchProposeBridgeTx",
                "bridge.proposeBridgeTx",
                "bridge.handleBridgeTx",
                "bridge.freezeTxs",
                "bridge.unfreezeTxs",
                "bridge.handleScheduledBridgeTx",
                "bridge.addFreezeAdmin",
                "bridge.removeFreezeAdmin",
                "bridge.removeTxs",
                "staking.bond",
                "staking.bondExtra",
                "staking.unbond",
                "staking.withdrawUnbonded",
                "staking.validate",
                "staking.nominate",
                "staking.chill",
                "staking.setPayee",
                "staking.setController",
                "staking.setValidatorCount",
                "staking.increaseValidatorCount",
                "staking.scaleValidatorCount",
                "staking.addPermissionedValidator",
                "staking.removePermissionedValidator",
                "staking.validateCddExpiryNominators",
                "staking.setCommissionCap",
                "staking.setMinBondThreshold",
                "staking.forceNoEras",
                "staking.forceNewEra",
                "staking.setInvulnerables",
                "staking.forceUnstake",
                "staking.forceNewEraAlways",
                "staking.cancelDeferredSlash",
                "staking.payoutStakers",
                "staking.rebond",
                "staking.setHistoryDepth",
                "staking.reapStash",
                "staking.submitElectionSolution",
                "staking.submitElectionSolutionUnsigned",
                "staking.payoutStakersBySystem",
                "staking.changeSlashingAllowedFor",
                "staking.updatePermissionedValidatorIntendedCount",
                "staking.chillFromGovernance",
                "session.setKeys",
                "session.purgeKeys",
                "grandpa.reportEquivocation",
                "grandpa.reportEquivocationUnsigned",
                "grandpa.noteStalled",
                "imOnline.heartbeat",
                "sudo.sudo",
                "sudo.sudoUncheckedWeight",
                "sudo.setKey",
                "sudo.sudoAs",
                "asset.registerTicker",
                "asset.acceptTickerTransfer",
                "asset.acceptAssetOwnershipTransfer",
                "asset.createAsset",
                "asset.freeze",
                "asset.unfreeze",
                "asset.renameAsset",
                "asset.issue",
                "asset.redeem",
                "asset.makeDivisible",
                "asset.addDocuments",
                "asset.removeDocuments",
                "asset.setFundingRound",
                "asset.updateIdentifiers",
                "asset.claimClassicTicker",
                "asset.reserveClassicTicker",
                "asset.controllerTransfer",
                "asset.registerCustomAssetType",
                "asset.createAssetWithCustomType",
                "asset.setAssetMetadata",
                "asset.setAssetMetadataDetails",
                "asset.registerAndSetLocalAssetMetadata",
                "asset.registerAssetMetadataLocalType",
                "asset.registerAssetMetadataGlobalType",
                "asset.redeemFromPortfolio",
                "asset.updateAssetType",
                "asset.removeLocalMetadataKey",
                "asset.removeMetadataValue",
                "capitalDistribution.distribute",
                "capitalDistribution.claim",
                "capitalDistribution.pushBenefit",
                "capitalDistribution.reclaim",
                "capitalDistribution.removeDistribution",
                "checkpoint.createCheckpoint",
                "checkpoint.setSchedulesMaxComplexity",
                "checkpoint.createSchedule",
                "checkpoint.removeSchedule",
                "complianceManager.addComplianceRequirement",
                "complianceManager.removeComplianceRequirement",
                "complianceManager.replaceAssetCompliance",
                "complianceManager.resetAssetCompliance",
                "complianceManager.pauseAssetCompliance",
                "complianceManager.resumeAssetCompliance",
                "complianceManager.addDefaultTrustedClaimIssuer",
                "complianceManager.removeDefaultTrustedClaimIssuer",
                "complianceManager.changeComplianceRequirement",
                "corporateAction.setMaxDetailsLength",
                "corporateAction.setDefaultTargets",
                "corporateAction.setDefaultWithholdingTax",
                "corporateAction.setDidWithholdingTax",
                "corporateAction.initiateCorporateAction",
                "corporateAction.linkCaDoc",
                "corporateAction.removeCa",
                "corporateAction.changeRecordDate",
                "corporateAction.initiateCorporateActionAndDistribute",
                "corporateBallot.attachBallot",
                "corporateBallot.vote",
                "corporateBallot.changeEnd",
                "corporateBallot.changeMeta",
                "corporateBallot.changeRcv",
                "corporateBallot.removeBallot",
                "pips.setPruneHistoricalPips",
                "pips.setMinProposalDeposit",
                "pips.setDefaultEnactmentPeriod",
                "pips.setPendingPipExpiry",
                "pips.setMaxPipSkipCount",
                "pips.setActivePipLimit",
                "pips.propose",
                "pips.vote",
                "pips.approveCommitteeProposal",
                "pips.rejectProposal",
                "pips.pruneProposal",
                "pips.rescheduleExecution",
                "pips.clearSnapshot",
                "pips.snapshot",
                "pips.enactSnapshotResults",
                "pips.executeScheduledPip",
                "pips.expireScheduledPip",
                "portfolio.createPortfolio",
                "portfolio.deletePortfolio",
                "portfolio.movePortfolioFunds",
                "portfolio.renamePortfolio",
                "portfolio.quitPortfolioCustody",
                "portfolio.acceptPortfolioCustody",
                "portfolio.movePortfolioFundsV2",
                "protocolFee.changeCoefficient",
                "protocolFee.changeBaseFee",
                "scheduler.schedule",
                "scheduler.cancel",
                "scheduler.scheduleNamed",
                "scheduler.cancelNamed",
                "scheduler.scheduleAfter",
                "scheduler.scheduleNamedAfter",
                "settlement.createVenue",
                "settlement.updateVenueDetails",
                "settlement.updateVenueType",
                "settlement.addInstruction",
                "settlement.addAndAffirmInstruction",
                "settlement.affirmInstruction",
                "settlement.withdrawAffirmation",
                "settlement.rejectInstruction",
                "settlement.affirmWithReceipts",
                "settlement.claimReceipt",
                "settlement.unclaimReceipt",
                "settlement.setVenueFiltering",
                "settlement.allowVenues",
                "settlement.disallowVenues",
                "settlement.changeReceiptValidity",
                "settlement.executeScheduledInstruction",
                "settlement.rescheduleInstruction",
                "settlement.updateVenueSigners",
                "settlement.addInstructionWithMemo",
                "settlement.addAndAffirmInstructionWithMemo",
                "settlement.executeManualInstruction",
                "settlement.placeholderClaimReceipt",
                "settlement.placeholderUnclaimReceipt",
                "settlement.addInstructionWithMemoV2",
                "settlement.addAndAffirmInstructionWithMemoV2",
                "settlement.affirmInstructionV2",
                "settlement.withdrawAffirmationV2",
                "settlement.rejectInstructionV2",
                "settlement.executeScheduledInstructionV2",
                "statistics.addTransferManager",
                "statistics.removeTransferManager",
                "statistics.addExemptedEntities",
                "statistics.removeExemptedEntities",
                "statistics.setAssetTransferCompliance",
                "statistics.setEntitiesExempt",
                "statistics.setActiveAssetStats",
                "statistics.batchUpdateAssetStats",
                "sto.createFundraiser",
                "sto.invest",
                "sto.freezeFundraiser",
                "sto.unfreezeFundraiser",
                "sto.modifyFundraiserWindow",
                "sto.stop",
                "treasury.disbursement",
                "treasury.reimbursement",
                "utility.batch",
                "utility.batchAtomic",
                "utility.batchOptimistic",
                "utility.relayTx",
                "externalAgents.createGroup",
                "externalAgents.setGroupPermissions",
                "externalAgents.removeAgent",
                "externalAgents.abdicate",
                "externalAgents.changeGroup",
                "externalAgents.acceptBecomeAgent",
                "externalAgents.createGroupAndAddAuth",
                "externalAgents.createAndChangeCustomGroup",
                "relayer.setPayingKey",
                "relayer.acceptPayingKey",
                "relayer.removePayingKey",
                "relayer.updatePolyxLimit",
                "relayer.increasePolyxLimit",
                "relayer.decreasePolyxLimit",
                "rewards.claimItnReward",
                "rewards.setItnRewardStatus",
                "testUtils.registerDid",
                "testUtils.mockCddRegisterDid",
                "testUtils.getMyDid",
                "testUtils.getCddOf",
                "polymeshContracts.call",
                "polymeshContracts.instantiateWithCode",
                "polymeshContracts.instantiate",
                "polymeshContracts.uploadCode",
                "polymeshContracts.removeCode",
                "polymeshContracts.instantiateWithCodePerms",
                "polymeshContracts.instantiateWithHashPerms",
                "polymeshContracts.updateCallRuntimeWhitelist",
                "preimage.notePreimage",
                "preimage.unnotePreimage",
                "preimage.requestPreimage",
                "preimage.unrequestPreimage",
                "contracts.call",
                "contracts.instantiateWithCode",
                "contracts.instantiate",
                "contracts.uploadCode",
                "contracts.removeCode",
                "contracts.callOldWeight",
                "contracts.instantiateWithCodeOldWeight",
                "contracts.instantiateOldWeight",
                "contracts.setCode",
                "nft.createNftCollection",
                "nft.issueNft",
                "nft.redeemNft"
              ]
            }
          }
        },
        "required": [
          "type",
          "values"
        ]
      },
      "PermissionsLikeDto": {
        "type": "object",
        "properties": {
          "assets": {
            "nullable": true,
            "description": "Assets on which to grant permissions. A null value represents full permissions",
            "allOf": [
              {
                "$ref": "#/components/schemas/AssetPermissionsDto"
              }
            ]
          },
          "portfolios": {
            "nullable": true,
            "description": "Portfolios on which to grant permissions. A null value represents full permissions",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortfolioPermissionsDto"
              }
            ]
          },
          "transactions": {
            "nullable": true,
            "description": "Transactions that the `secondaryAccount` has permission to execute. A null value represents full permissions. This value should not be passed along with the `transactionGroups`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionPermissionsDto"
              }
            ]
          },
          "transactionGroups": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "PortfolioManagement",
                "AssetManagement",
                "AdvancedAssetManagement",
                "Distribution",
                "Issuance",
                "TrustedClaimIssuersManagement",
                "ClaimsManagement",
                "ComplianceRequirementsManagement",
                "CorporateActionsManagement",
                "StoManagement"
              ]
            },
            "description": "Transaction Groups that `secondaryAccount` has permission to execute. This value should not be passed along with the `transactions`.",
            "example": [
              "PortfolioManagement"
            ]
          }
        }
      },
      "AddSecondaryAccountParamsDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "secondaryAccount": {
            "type": "string",
            "description": "Account address to be invited",
            "example": "5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV"
          },
          "permissions": {
            "description": "Permissions to be granted to the `secondaryAccount`",
            "allOf": [
              {
                "$ref": "#/components/schemas/PermissionsLikeDto"
              }
            ]
          },
          "expiry": {
            "type": "string",
            "description": "Expiry date of the `permissions`",
            "example": "2021-05-22T23:00:00.000Z"
          }
        },
        "required": [
          "signer",
          "dryRun",
          "secondaryAccount"
        ]
      },
      "CreateMockIdentityDto": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Account address to create an Identity for",
            "example": "5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV"
          },
          "initialPolyx": {
            "description": "Starting POLYX balance to initialize the Account with",
            "example": 100000,
            "allOf": [
              {
                "$ref": "#/components/schemas/BigNumber"
              }
            ]
          }
        },
        "required": [
          "address",
          "initialPolyx"
        ]
      },
      "ClaimModel-Omit-claim": {
        "type": "object",
        "properties": {
          "target": {
            "type": "string",
            "description": "DID of the target Identity",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          },
          "issuer": {
            "type": "string",
            "description": "DID of the issuer Identity",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          },
          "issuedAt": {
            "type": "string",
            "description": "Date when the Claim was issued",
            "example": "1987-10-13T23:00:00.000Z"
          },
          "expiry": {
            "type": "string",
            "nullable": true,
            "description": "Expiry date of the Claim",
            "example": "1987-10-13T23:00:00.000Z"
          }
        },
        "required": [
          "target",
          "issuer",
          "issuedAt",
          "expiry"
        ]
      },
      "CddClaimModel": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Claim type",
            "example": "CustomerDueDiligence"
          },
          "id": {
            "type": "string",
            "description": "ID of the Claim",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          }
        },
        "required": [
          "type",
          "id"
        ]
      },
      "ScopeModel": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of Scope. If `Identity` then `value` should be a DID. If `Ticker` then `value` should be a Ticker",
            "enum": [
              "Identity",
              "Ticker",
              "Custom"
            ],
            "example": "Identity"
          },
          "value": {
            "type": "string",
            "example": "0x61a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1",
            "description": "The value of the Scope. This is a hex prefixed 64 character string for `Identity`, 12 uppercase letters for Ticker"
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "ClaimScopeModel": {
        "type": "object",
        "properties": {
          "scope": {
            "description": "The scope that has been assigned to Identity",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ScopeModel"
              }
            ]
          },
          "ticker": {
            "type": "string",
            "description": "The ticker to which the scope is valid for",
            "example": "TICKER"
          }
        },
        "required": [
          "scope"
        ]
      },
      "InvestorUniquenessClaimModel": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Claim type",
            "example": "InvestorUniqueness"
          },
          "scope": {
            "description": "Scope of the Claim",
            "allOf": [
              {
                "$ref": "#/components/schemas/ScopeModel"
              }
            ]
          },
          "cddId": {
            "type": "string",
            "description": "CDD ID of the Claim",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          },
          "scopeId": {
            "type": "string",
            "description": "Scope ID of the Claim",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          }
        },
        "required": [
          "type",
          "scope",
          "cddId",
          "scopeId"
        ]
      },
      "LegModel": {
        "type": "object",
        "properties": {
          "from": {
            "description": "Portfolio from which the transfer is to be made",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortfolioIdentifierModel"
              }
            ]
          },
          "to": {
            "description": "Portfolio to which the transfer is to be made",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortfolioIdentifierModel"
              }
            ]
          },
          "amount": {
            "type": "string",
            "description": "Amount to be transferred",
            "example": "123"
          },
          "asset": {
            "type": "string",
            "description": "Asset to be transferred",
            "example": "TICKER"
          }
        },
        "required": [
          "from",
          "to",
          "amount",
          "asset"
        ]
      },
      "InstructionModel": {
        "type": "object",
        "properties": {
          "venue": {
            "type": "string",
            "description": "ID of the Venue through which the settlement is handled",
            "example": "123"
          },
          "createdAt": {
            "type": "string",
            "description": "Date when the Instruction was created",
            "example": "1987-10-13T23:00:00.000Z"
          },
          "status": {
            "type": "string",
            "description": "The current status of the Instruction",
            "enum": [
              "Pending",
              "Executed",
              "Failed"
            ],
            "example": "Pending"
          },
          "tradeDate": {
            "type": "string",
            "description": "Date at which the trade was agreed upon (optional, for offchain trades)",
            "example": "1987-10-13T23:00:00.000Z"
          },
          "valueDate": {
            "type": "string",
            "description": "Date at which the trade was executed (optional, for offchain trades)",
            "example": "1987-10-13T23:00:00.000Z"
          },
          "type": {
            "type": "string",
            "description": "Type of the Instruction",
            "enum": [
              "SettleOnAffirmation",
              "SettleOnBlock",
              "SettleManual"
            ],
            "example": "SettleOnBlock"
          },
          "endBlock": {
            "type": "string",
            "description": "Block at which the Instruction is executed. This value will only be present for \"SettleOnBlock\" type Instruction",
            "example": "1000000"
          },
          "eventIdentifier": {
            "description": "Identifies the event where the Instruction execution was attempted. This value will not be present for a \"Pending\" Instruction",
            "allOf": [
              {
                "$ref": "#/components/schemas/EventIdentifierModel"
              }
            ]
          },
          "memo": {
            "type": "string",
            "description": "Identifier string provided while creating the Instruction",
            "example": "Transfer of GROWTH Asset"
          },
          "legs": {
            "description": "List of Legs in the Instruction",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LegModel"
            }
          }
        },
        "required": [
          "venue",
          "createdAt",
          "status",
          "type",
          "legs"
        ]
      },
      "LegDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "Amount of the Asset to be transferred",
            "example": "1000"
          },
          "from": {
            "description": "Portfolio of the sender",
            "example": {
              "did": "0x0600000000000000000000000000000000000000000000000000000000000000",
              "id": 1
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/PortfolioDto"
              }
            ]
          },
          "to": {
            "description": "Portfolio of the receiver",
            "example": {
              "did": "0x0111111111111111111111111111111111111111111111111111111111111111",
              "id": 0
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/PortfolioDto"
              }
            ]
          },
          "asset": {
            "type": "string",
            "description": "Asset ticker",
            "example": "TICKER"
          }
        },
        "required": [
          "amount",
          "from",
          "to",
          "asset"
        ]
      },
      "CreateInstructionDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "tradeDate": {
            "format": "date-time",
            "type": "string",
            "description": "Date at which the trade was agreed upon (optional, for offchain trades)",
            "example": "1987-10-13T23:00:00.000Z"
          },
          "valueDate": {
            "format": "date-time",
            "type": "string",
            "description": "Date at which the trade was executed (optional, for offchain trades)",
            "example": "1987-10-13T23:00:00.000Z"
          },
          "endBlock": {
            "type": "string",
            "description": "Block at which the Instruction will be executed. If not passed, the Instruction will be executed when all parties affirm or as soon as one party rejects",
            "example": "123"
          },
          "memo": {
            "type": "string",
            "description": "Identifier string to help differentiate instructions. Maximum 32 bytes",
            "example": "Transfer of GROWTH Asset"
          },
          "legs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LegDto"
            }
          }
        },
        "required": [
          "signer",
          "dryRun",
          "legs"
        ]
      },
      "CreatedInstructionModel": {
        "type": "object",
        "properties": {
          "transactions": {
            "description": "List of transactions",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransactionModel"
              },
              {
                "$ref": "#/components/schemas/BatchTransactionModel"
              }
            ],
            "items": {
              "type": "array"
            }
          },
          "details": {
            "description": "Transaction details",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDetailsModel"
            }
          },
          "instruction": {
            "type": "string",
            "description": "ID of the newly created settlement Instruction",
            "example": "123"
          }
        },
        "required": [
          "transactions",
          "details",
          "instruction"
        ]
      },
      "InstructionAffirmationModel": {
        "type": "object",
        "properties": {
          "identity": {
            "type": "string",
            "description": "The DID of the identity affirming the Instruction",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          },
          "status": {
            "type": "string",
            "description": "The current status of the Instruction",
            "enum": [
              "Unknown",
              "Pending",
              "Affirmed"
            ],
            "example": "Pending"
          }
        },
        "required": [
          "identity",
          "status"
        ]
      },
      "VenueDetailsModel": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "The DID of the Venue owner",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          },
          "description": {
            "type": "string",
            "description": "Description of the Venue",
            "example": "VENUE-DESC"
          },
          "type": {
            "type": "string",
            "description": "Type of the Venue",
            "enum": [
              "Other",
              "Distribution",
              "Sto",
              "Exchange"
            ],
            "example": "Distribution"
          }
        },
        "required": [
          "owner",
          "description",
          "type"
        ]
      },
      "CreateVenueDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "description": {
            "type": "string",
            "description": "Description of the Venue",
            "example": "A place to exchange Assets"
          },
          "type": {
            "enum": [
              "Other",
              "Distribution",
              "Sto",
              "Exchange"
            ],
            "type": "string",
            "description": "The type of Venue",
            "example": "Exchange"
          }
        },
        "required": [
          "signer",
          "dryRun",
          "description",
          "type"
        ]
      },
      "CreatedVenueModel": {
        "type": "object",
        "properties": {
          "transactions": {
            "description": "List of transactions",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransactionModel"
              },
              {
                "$ref": "#/components/schemas/BatchTransactionModel"
              }
            ],
            "items": {
              "type": "array"
            }
          },
          "details": {
            "description": "Transaction details",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDetailsModel"
            }
          },
          "venue": {
            "type": "string",
            "description": "ID of the newly created Venue",
            "example": "123"
          }
        },
        "required": [
          "transactions",
          "details",
          "venue"
        ]
      },
      "ModifyVenueDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "description": {
            "type": "string",
            "description": "Details about the Venue",
            "example": "The TSX is an exchange located in Toronto, Ontario"
          },
          "type": {
            "enum": [
              "Other",
              "Distribution",
              "Sto",
              "Exchange"
            ],
            "type": "string",
            "description": "The type of Venue",
            "example": "Exchange"
          }
        },
        "required": [
          "signer",
          "dryRun"
        ]
      },
      "TransferBreakdownModel": {
        "type": "object",
        "properties": {
          "general": {
            "type": "string",
            "description": "List of general transfer errors",
            "enum": [
              "InvalidGranularity",
              "SelfTransfer",
              "InvalidReceiverCdd",
              "InvalidSenderCdd",
              "ScopeClaimMissing",
              "InsufficientBalance",
              "TransfersFrozen",
              "InvalidSenderPortfolio",
              "InvalidReceiverPortfolio",
              "InsufficientPortfolioBalance"
            ],
            "example": [
              "InvalidSenderPortfolio",
              "InvalidSenderCdd"
            ]
          },
          "compliance": {
            "type": "object",
            "description": "Compliance rules for the Asset, and whether the Asset transfer adheres to them"
          },
          "restrictions": {
            "description": "List of transfer restrictions and whether the transfer satisfies each one",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "result": {
            "type": "boolean",
            "description": "Indicator to know if the transfer is possible.",
            "example": true
          }
        },
        "required": [
          "general",
          "compliance",
          "restrictions",
          "result"
        ]
      },
      "BalanceModel": {
        "type": "object",
        "properties": {
          "free": {
            "type": "string",
            "description": "Free asset amount",
            "example": "123"
          },
          "locked": {
            "type": "string",
            "description": "Locked asset amount",
            "example": "456"
          },
          "total": {
            "type": "string",
            "description": "Sum total of locked and free asset amount",
            "example": "578"
          }
        },
        "required": [
          "free",
          "locked",
          "total"
        ]
      },
      "TransferPolyxDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "to": {
            "type": "string",
            "description": "Account that will receive the POLYX",
            "example": "5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV"
          },
          "amount": {
            "type": "string",
            "description": "Amount of POLYX to be transferred. Note that amount to be transferred should not be greater than the origin Account's free balance",
            "example": "123"
          },
          "memo": {
            "type": "string",
            "maxLength": 32,
            "description": "A note to help differentiate transfers",
            "example": "Sample transfer"
          }
        },
        "required": [
          "signer",
          "dryRun",
          "to",
          "amount"
        ]
      },
      "ExtrinsicModel": {
        "type": "object",
        "properties": {
          "blockHash": {
            "type": "string",
            "description": "Hash of the block where the transaction resides",
            "example": "0x9d05973b0bacdbf26b705358fbcb7085354b1b7836ee1cc54e824810479dccf6"
          },
          "blockNumber": {
            "type": "string",
            "description": "Number of the block where the transaction resides",
            "example": "1000000"
          },
          "extrinsicIdx": {
            "type": "string",
            "description": "Index of the transaction in the block",
            "example": "1"
          },
          "address": {
            "type": "string",
            "description": "Public key of the signer. Unsigned transactions have no signer, in which case this value is null (example: an enacted governance proposal)",
            "nullable": true,
            "example": "5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY"
          },
          "nonce": {
            "type": "string",
            "description": "Nonce of the transaction. Null for unsigned transactions where address is null",
            "nullable": true,
            "example": "123456"
          },
          "transactionTag": {
            "type": "string",
            "description": "Transaction type identifier (for UI purposes). The format is <palletName>.<transactionName>",
            "enum": [
              "system.fillBlock",
              "system.remark",
              "system.setHeapPages",
              "system.setCode",
              "system.setCodeWithoutChecks",
              "system.setChangesTrieConfig",
              "system.setStorage",
              "system.killStorage",
              "system.killPrefix",
              "system.remarkWithEvent",
              "system.placeholderFillBlock",
              "babe.reportEquivocation",
              "babe.reportEquivocationUnsigned",
              "babe.planConfigChange",
              "timestamp.set",
              "indices.claim",
              "indices.transfer",
              "indices.free",
              "indices.forceTransfer",
              "indices.freeze",
              "authorship.setUncles",
              "balances.transfer",
              "balances.transferWithMemo",
              "balances.depositBlockRewardReserveBalance",
              "balances.setBalance",
              "balances.forceTransfer",
              "balances.burnAccountBalance",
              "identity.cddRegisterDid",
              "identity.invalidateCddClaims",
              "identity.removeSecondaryKeys",
              "identity.acceptPrimaryKey",
              "identity.changeCddRequirementForMkRotation",
              "identity.joinIdentityAsKey",
              "identity.leaveIdentityAsKey",
              "identity.addClaim",
              "identity.revokeClaim",
              "identity.setPermissionToSigner",
              "identity.legacySetPermissionToSigner",
              "identity.freezeSecondaryKeys",
              "identity.unfreezeSecondaryKeys",
              "identity.addAuthorization",
              "identity.removeAuthorization",
              "identity.addSecondaryKeysWithAuthorization",
              "identity.addInvestorUniquenessClaim",
              "identity.gcAddCddClaim",
              "identity.gcRevokeCddClaim",
              "identity.addInvestorUniquenessClaimV2",
              "identity.revokeClaimByIndex",
              "identity.rotatePrimaryKeyToSecondary",
              "identity.removeSecondaryKeysOld",
              "identity.placeholderLegacySetPermissionToSigner",
              "identity.addSecondaryKeysWithAuthorizationOld",
              "identity.setSecondaryKeyPermissions",
              "identity.registerCustomClaimType",
              "identity.cddRegisterDidWithCdd",
              "cddServiceProviders.setActiveMembersLimit",
              "cddServiceProviders.disableMember",
              "cddServiceProviders.addMember",
              "cddServiceProviders.removeMember",
              "cddServiceProviders.swapMember",
              "cddServiceProviders.resetMembers",
              "cddServiceProviders.abdicateMembership",
              "polymeshCommittee.setVoteThreshold",
              "polymeshCommittee.setReleaseCoordinator",
              "polymeshCommittee.setExpiresAfter",
              "polymeshCommittee.voteOrPropose",
              "polymeshCommittee.vote",
              "committeeMembership.setActiveMembersLimit",
              "committeeMembership.disableMember",
              "committeeMembership.addMember",
              "committeeMembership.removeMember",
              "committeeMembership.swapMember",
              "committeeMembership.resetMembers",
              "committeeMembership.abdicateMembership",
              "technicalCommittee.setVoteThreshold",
              "technicalCommittee.setReleaseCoordinator",
              "technicalCommittee.setExpiresAfter",
              "technicalCommittee.voteOrPropose",
              "technicalCommittee.vote",
              "technicalCommitteeMembership.setActiveMembersLimit",
              "technicalCommitteeMembership.disableMember",
              "technicalCommitteeMembership.addMember",
              "technicalCommitteeMembership.removeMember",
              "technicalCommitteeMembership.swapMember",
              "technicalCommitteeMembership.resetMembers",
              "technicalCommitteeMembership.abdicateMembership",
              "upgradeCommittee.setVoteThreshold",
              "upgradeCommittee.setReleaseCoordinator",
              "upgradeCommittee.setExpiresAfter",
              "upgradeCommittee.voteOrPropose",
              "upgradeCommittee.vote",
              "upgradeCommitteeMembership.setActiveMembersLimit",
              "upgradeCommitteeMembership.disableMember",
              "upgradeCommitteeMembership.addMember",
              "upgradeCommitteeMembership.removeMember",
              "upgradeCommitteeMembership.swapMember",
              "upgradeCommitteeMembership.resetMembers",
              "upgradeCommitteeMembership.abdicateMembership",
              "multiSig.createMultisig",
              "multiSig.createOrApproveProposalAsIdentity",
              "multiSig.createOrApproveProposalAsKey",
              "multiSig.createProposalAsIdentity",
              "multiSig.createProposalAsKey",
              "multiSig.approveAsIdentity",
              "multiSig.approveAsKey",
              "multiSig.rejectAsIdentity",
              "multiSig.rejectAsKey",
              "multiSig.acceptMultisigSignerAsIdentity",
              "multiSig.acceptMultisigSignerAsKey",
              "multiSig.addMultisigSigner",
              "multiSig.removeMultisigSigner",
              "multiSig.addMultisigSignersViaCreator",
              "multiSig.removeMultisigSignersViaCreator",
              "multiSig.changeSigsRequired",
              "multiSig.makeMultisigSigner",
              "multiSig.makeMultisigPrimary",
              "multiSig.executeScheduledProposal",
              "multiSig.makeMultisigSecondary",
              "bridge.changeController",
              "bridge.changeAdmin",
              "bridge.changeTimelock",
              "bridge.freeze",
              "bridge.unfreeze",
              "bridge.changeBridgeLimit",
              "bridge.changeBridgeExempted",
              "bridge.forceHandleBridgeTx",
              "bridge.batchProposeBridgeTx",
              "bridge.proposeBridgeTx",
              "bridge.handleBridgeTx",
              "bridge.freezeTxs",
              "bridge.unfreezeTxs",
              "bridge.handleScheduledBridgeTx",
              "bridge.addFreezeAdmin",
              "bridge.removeFreezeAdmin",
              "bridge.removeTxs",
              "staking.bond",
              "staking.bondExtra",
              "staking.unbond",
              "staking.withdrawUnbonded",
              "staking.validate",
              "staking.nominate",
              "staking.chill",
              "staking.setPayee",
              "staking.setController",
              "staking.setValidatorCount",
              "staking.increaseValidatorCount",
              "staking.scaleValidatorCount",
              "staking.addPermissionedValidator",
              "staking.removePermissionedValidator",
              "staking.validateCddExpiryNominators",
              "staking.setCommissionCap",
              "staking.setMinBondThreshold",
              "staking.forceNoEras",
              "staking.forceNewEra",
              "staking.setInvulnerables",
              "staking.forceUnstake",
              "staking.forceNewEraAlways",
              "staking.cancelDeferredSlash",
              "staking.payoutStakers",
              "staking.rebond",
              "staking.setHistoryDepth",
              "staking.reapStash",
              "staking.submitElectionSolution",
              "staking.submitElectionSolutionUnsigned",
              "staking.payoutStakersBySystem",
              "staking.changeSlashingAllowedFor",
              "staking.updatePermissionedValidatorIntendedCount",
              "staking.chillFromGovernance",
              "session.setKeys",
              "session.purgeKeys",
              "grandpa.reportEquivocation",
              "grandpa.reportEquivocationUnsigned",
              "grandpa.noteStalled",
              "imOnline.heartbeat",
              "sudo.sudo",
              "sudo.sudoUncheckedWeight",
              "sudo.setKey",
              "sudo.sudoAs",
              "asset.registerTicker",
              "asset.acceptTickerTransfer",
              "asset.acceptAssetOwnershipTransfer",
              "asset.createAsset",
              "asset.freeze",
              "asset.unfreeze",
              "asset.renameAsset",
              "asset.issue",
              "asset.redeem",
              "asset.makeDivisible",
              "asset.addDocuments",
              "asset.removeDocuments",
              "asset.setFundingRound",
              "asset.updateIdentifiers",
              "asset.claimClassicTicker",
              "asset.reserveClassicTicker",
              "asset.controllerTransfer",
              "asset.registerCustomAssetType",
              "asset.createAssetWithCustomType",
              "asset.setAssetMetadata",
              "asset.setAssetMetadataDetails",
              "asset.registerAndSetLocalAssetMetadata",
              "asset.registerAssetMetadataLocalType",
              "asset.registerAssetMetadataGlobalType",
              "asset.redeemFromPortfolio",
              "asset.updateAssetType",
              "asset.removeLocalMetadataKey",
              "asset.removeMetadataValue",
              "capitalDistribution.distribute",
              "capitalDistribution.claim",
              "capitalDistribution.pushBenefit",
              "capitalDistribution.reclaim",
              "capitalDistribution.removeDistribution",
              "checkpoint.createCheckpoint",
              "checkpoint.setSchedulesMaxComplexity",
              "checkpoint.createSchedule",
              "checkpoint.removeSchedule",
              "complianceManager.addComplianceRequirement",
              "complianceManager.removeComplianceRequirement",
              "complianceManager.replaceAssetCompliance",
              "complianceManager.resetAssetCompliance",
              "complianceManager.pauseAssetCompliance",
              "complianceManager.resumeAssetCompliance",
              "complianceManager.addDefaultTrustedClaimIssuer",
              "complianceManager.removeDefaultTrustedClaimIssuer",
              "complianceManager.changeComplianceRequirement",
              "corporateAction.setMaxDetailsLength",
              "corporateAction.setDefaultTargets",
              "corporateAction.setDefaultWithholdingTax",
              "corporateAction.setDidWithholdingTax",
              "corporateAction.initiateCorporateAction",
              "corporateAction.linkCaDoc",
              "corporateAction.removeCa",
              "corporateAction.changeRecordDate",
              "corporateAction.initiateCorporateActionAndDistribute",
              "corporateBallot.attachBallot",
              "corporateBallot.vote",
              "corporateBallot.changeEnd",
              "corporateBallot.changeMeta",
              "corporateBallot.changeRcv",
              "corporateBallot.removeBallot",
              "pips.setPruneHistoricalPips",
              "pips.setMinProposalDeposit",
              "pips.setDefaultEnactmentPeriod",
              "pips.setPendingPipExpiry",
              "pips.setMaxPipSkipCount",
              "pips.setActivePipLimit",
              "pips.propose",
              "pips.vote",
              "pips.approveCommitteeProposal",
              "pips.rejectProposal",
              "pips.pruneProposal",
              "pips.rescheduleExecution",
              "pips.clearSnapshot",
              "pips.snapshot",
              "pips.enactSnapshotResults",
              "pips.executeScheduledPip",
              "pips.expireScheduledPip",
              "portfolio.createPortfolio",
              "portfolio.deletePortfolio",
              "portfolio.movePortfolioFunds",
              "portfolio.renamePortfolio",
              "portfolio.quitPortfolioCustody",
              "portfolio.acceptPortfolioCustody",
              "portfolio.movePortfolioFundsV2",
              "protocolFee.changeCoefficient",
              "protocolFee.changeBaseFee",
              "scheduler.schedule",
              "scheduler.cancel",
              "scheduler.scheduleNamed",
              "scheduler.cancelNamed",
              "scheduler.scheduleAfter",
              "scheduler.scheduleNamedAfter",
              "settlement.createVenue",
              "settlement.updateVenueDetails",
              "settlement.updateVenueType",
              "settlement.addInstruction",
              "settlement.addAndAffirmInstruction",
              "settlement.affirmInstruction",
              "settlement.withdrawAffirmation",
              "settlement.rejectInstruction",
              "settlement.affirmWithReceipts",
              "settlement.claimReceipt",
              "settlement.unclaimReceipt",
              "settlement.setVenueFiltering",
              "settlement.allowVenues",
              "settlement.disallowVenues",
              "settlement.changeReceiptValidity",
              "settlement.executeScheduledInstruction",
              "settlement.rescheduleInstruction",
              "settlement.updateVenueSigners",
              "settlement.addInstructionWithMemo",
              "settlement.addAndAffirmInstructionWithMemo",
              "settlement.executeManualInstruction",
              "settlement.placeholderClaimReceipt",
              "settlement.placeholderUnclaimReceipt",
              "settlement.addInstructionWithMemoV2",
              "settlement.addAndAffirmInstructionWithMemoV2",
              "settlement.affirmInstructionV2",
              "settlement.withdrawAffirmationV2",
              "settlement.rejectInstructionV2",
              "settlement.executeScheduledInstructionV2",
              "statistics.addTransferManager",
              "statistics.removeTransferManager",
              "statistics.addExemptedEntities",
              "statistics.removeExemptedEntities",
              "statistics.setAssetTransferCompliance",
              "statistics.setEntitiesExempt",
              "statistics.setActiveAssetStats",
              "statistics.batchUpdateAssetStats",
              "sto.createFundraiser",
              "sto.invest",
              "sto.freezeFundraiser",
              "sto.unfreezeFundraiser",
              "sto.modifyFundraiserWindow",
              "sto.stop",
              "treasury.disbursement",
              "treasury.reimbursement",
              "utility.batch",
              "utility.batchAtomic",
              "utility.batchOptimistic",
              "utility.relayTx",
              "externalAgents.createGroup",
              "externalAgents.setGroupPermissions",
              "externalAgents.removeAgent",
              "externalAgents.abdicate",
              "externalAgents.changeGroup",
              "externalAgents.acceptBecomeAgent",
              "externalAgents.createGroupAndAddAuth",
              "externalAgents.createAndChangeCustomGroup",
              "relayer.setPayingKey",
              "relayer.acceptPayingKey",
              "relayer.removePayingKey",
              "relayer.updatePolyxLimit",
              "relayer.increasePolyxLimit",
              "relayer.decreasePolyxLimit",
              "rewards.claimItnReward",
              "rewards.setItnRewardStatus",
              "testUtils.registerDid",
              "testUtils.mockCddRegisterDid",
              "testUtils.getMyDid",
              "testUtils.getCddOf",
              "polymeshContracts.call",
              "polymeshContracts.instantiateWithCode",
              "polymeshContracts.instantiate",
              "polymeshContracts.uploadCode",
              "polymeshContracts.removeCode",
              "polymeshContracts.instantiateWithCodePerms",
              "polymeshContracts.instantiateWithHashPerms",
              "polymeshContracts.updateCallRuntimeWhitelist",
              "preimage.notePreimage",
              "preimage.unnotePreimage",
              "preimage.requestPreimage",
              "preimage.unrequestPreimage",
              "contracts.call",
              "contracts.instantiateWithCode",
              "contracts.instantiate",
              "contracts.uploadCode",
              "contracts.removeCode",
              "contracts.callOldWeight",
              "contracts.instantiateWithCodeOldWeight",
              "contracts.instantiateOldWeight",
              "contracts.setCode",
              "nft.createNftCollection",
              "nft.issueNft",
              "nft.redeemNft"
            ],
            "example": "asset.registerTicker"
          },
          "params": {
            "description": "List of parameters associated with the transaction",
            "example": [
              {
                "name": "ticker",
                "value": "TICKER"
              }
            ],
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "success": {
            "type": "boolean",
            "description": "Indicates whether the transaction was successful or not",
            "example": true
          },
          "specVersionId": {
            "type": "string",
            "description": "Spec version of the chain",
            "example": "3002"
          },
          "extrinsicHash": {
            "type": "string",
            "description": "Hash of the transaction",
            "example": "44b8a09e9647b34d81d9eb40f26c5bb35ea216610a03df71978558ec939d5120"
          }
        },
        "required": [
          "blockHash",
          "blockNumber",
          "extrinsicIdx",
          "address",
          "nonce",
          "transactionTag",
          "params",
          "success",
          "specVersionId",
          "extrinsicHash"
        ]
      },
      "SubsidyModel": {
        "type": "object",
        "properties": {
          "beneficiary": {
            "description": "Account whose transactions are being paid for",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountModel"
              }
            ]
          },
          "subsidizer": {
            "description": "Account that is paying for the transactions",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountModel"
              }
            ]
          },
          "allowance": {
            "type": "string",
            "description": "Amount of POLYX being subsidized",
            "example": "12345"
          }
        },
        "required": [
          "beneficiary",
          "subsidizer",
          "allowance"
        ]
      },
      "RevokePermissionsDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "secondaryAccounts": {
            "description": "List of secondary Account addresses whose permissions are to be revoked",
            "example": [
              "5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "signer",
          "dryRun",
          "secondaryAccounts"
        ]
      },
      "PermissionedAccountDto": {
        "type": "object",
        "properties": {
          "secondaryAccount": {
            "type": "string",
            "description": "Account address",
            "example": "5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV"
          },
          "permissions": {
            "description": "Permissions to be granted to the `secondaryAccount`",
            "allOf": [
              {
                "$ref": "#/components/schemas/PermissionsLikeDto"
              }
            ]
          }
        },
        "required": [
          "secondaryAccount",
          "permissions"
        ]
      },
      "ModifyPermissionsDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "secondaryAccounts": {
            "description": "List of secondary Accounts containing address and modified permissions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionedAccountDto"
            }
          }
        },
        "required": [
          "signer",
          "dryRun",
          "secondaryAccounts"
        ]
      },
      "CreateSubsidyDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "beneficiary": {
            "type": "string",
            "description": "Address of the Account to subsidize",
            "example": "5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV"
          },
          "allowance": {
            "type": "string",
            "description": "Amount of POLYX to be subsidized. This can be increased/decreased later on",
            "example": "1000"
          }
        },
        "required": [
          "signer",
          "dryRun",
          "beneficiary",
          "allowance"
        ]
      },
      "ModifyAllowanceDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "beneficiary": {
            "type": "string",
            "description": "Address of the beneficiary of the Subsidy relationship whose allowance is being modified",
            "example": "5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV"
          },
          "allowance": {
            "type": "string",
            "description": "Amount of POLYX to set the allowance to or increase/decrease the allowance by",
            "example": "1000"
          }
        },
        "required": [
          "signer",
          "dryRun",
          "beneficiary",
          "allowance"
        ]
      },
      "QuitSubsidyDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "beneficiary": {
            "type": "string",
            "description": "Beneficiary address of the Subsidy relationship to be quit. Note, this should be passed only if quitting as a subsidizer",
            "example": "5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV"
          },
          "subsidizer": {
            "type": "string",
            "description": "Subsidizer address of the Subsidy relationship to be quit. Note, this should be passed only if quitting as a beneficiary",
            "example": "5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV"
          }
        },
        "required": [
          "signer",
          "dryRun"
        ]
      },
      "AssetBalanceModel": {
        "type": "object",
        "properties": {
          "free": {
            "type": "string",
            "description": "Free asset amount",
            "example": "123"
          },
          "locked": {
            "type": "string",
            "description": "Locked asset amount",
            "example": "456"
          },
          "total": {
            "type": "string",
            "description": "Sum total of locked and free asset amount",
            "example": "578"
          },
          "asset": {
            "type": "string",
            "description": "Ticker of the Asset",
            "example": "TICKER"
          }
        },
        "required": [
          "free",
          "locked",
          "total",
          "asset"
        ]
      },
      "PortfolioModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Portfolio number. 0 represents the Default Portfolio",
            "example": "123"
          },
          "name": {
            "type": "string",
            "description": "Name of the Portfolio",
            "example": "ABC"
          },
          "assetBalances": {
            "description": "List of balances for each Asset in the Portfolio",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetBalanceModel"
            }
          },
          "custodian": {
            "type": "string",
            "description": "Identity who custodies the Portfolio",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          },
          "owner": {
            "type": "string",
            "description": "Identity who owns the Portfolio",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          }
        },
        "required": [
          "id",
          "name",
          "assetBalances",
          "owner"
        ]
      },
      "PortfolioMovementDto": {
        "type": "object",
        "properties": {
          "ticker": {
            "type": "string",
            "description": "Ticker of Asset to move",
            "example": "TICKER"
          },
          "amount": {
            "type": "string",
            "description": "Amount of the Asset to move",
            "example": "1234"
          },
          "memo": {
            "type": "string",
            "description": "Memo to help identify the transfer. Maximum 32 bytes",
            "example": "Transfer to growth portfolio"
          }
        },
        "required": [
          "ticker",
          "amount"
        ]
      },
      "AssetMovementDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "from": {
            "example": "2",
            "description": "ID of the Portfolio to move the Asset from. Use 0 for default Portfolio",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigNumber"
              }
            ]
          },
          "to": {
            "example": "1",
            "description": "ID of the Portfolio to move the Asset to. Use 0 for default Portfolio",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigNumber"
              }
            ]
          },
          "items": {
            "description": "List of Assets and amounts to be moved",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioMovementDto"
            }
          }
        },
        "required": [
          "signer",
          "dryRun",
          "from",
          "to",
          "items"
        ]
      },
      "CreatePortfolioDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "The name of the Portfolio to be created",
            "example": "FOLIO-1"
          }
        },
        "required": [
          "signer",
          "dryRun",
          "name"
        ]
      },
      "CreatedPortfolioModel": {
        "type": "object",
        "properties": {
          "transactions": {
            "description": "List of transactions",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransactionModel"
              },
              {
                "$ref": "#/components/schemas/BatchTransactionModel"
              }
            ],
            "items": {
              "type": "array"
            }
          },
          "details": {
            "description": "Transaction details",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDetailsModel"
            }
          },
          "portfolio": {
            "description": "Details of the newly created Portfolio",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortfolioIdentifierModel"
              }
            ]
          }
        },
        "required": [
          "transactions",
          "details",
          "portfolio"
        ]
      },
      "ModifyPortfolioDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "The new name of the Portfolio",
            "example": "FOLIO-1"
          }
        },
        "required": [
          "signer",
          "dryRun",
          "name"
        ]
      },
      "SetCustodianDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "target": {
            "type": "string",
            "description": "The DID of identity to be set as custodian",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          },
          "expiry": {
            "format": "date-time",
            "type": "string",
            "description": "Expiry date for the custody over Portfolio",
            "example": "2021-05-22T23:00:00.000Z"
          }
        },
        "required": [
          "signer",
          "dryRun",
          "target"
        ]
      },
      "AccountDataModel": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "example": "5grwXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXx"
          }
        },
        "required": [
          "address"
        ]
      },
      "HistoricSettlementLegModel": {
        "type": "object",
        "properties": {
          "direction": {
            "type": "string",
            "description": "The direction of the settlement leg",
            "example": "Incoming",
            "enum": [
              "None",
              "Incoming",
              "Outgoing"
            ]
          }
        },
        "required": [
          "direction"
        ]
      },
      "HistoricSettlementModel": {
        "type": "object",
        "properties": {
          "blockNumber": {
            "description": "Block number of the settlement transaction",
            "example": "1",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigNumber"
              }
            ]
          },
          "blockHash": {
            "type": "string",
            "description": "Block hash of the settlement transaction",
            "example": "0x01"
          },
          "status": {
            "type": "string",
            "description": "Transaction status",
            "enum": [
              "None",
              "Executed",
              "Failed",
              "Rejected"
            ],
            "example": "Executed"
          },
          "accounts": {
            "description": "Array of account addresses involved in the settlement",
            "example": [
              {
                "address": "5grwXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXx"
              },
              {
                "address": "5graXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXx"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountDataModel"
            }
          },
          "legs": {
            "description": "Transaction settlement legs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HistoricSettlementLegModel"
            }
          }
        },
        "required": [
          "blockNumber",
          "blockHash",
          "status",
          "accounts",
          "legs"
        ]
      },
      "ScopeDto": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "Identity",
              "Ticker",
              "Custom"
            ],
            "type": "string",
            "description": "The type of Scope. If `Identity` then `value` should be a DID. If `Ticker` then `value` should be a Ticker",
            "example": "Identity"
          },
          "value": {
            "type": "string",
            "description": "The value of the Scope. This is a hex prefixed 64 character string for `Identity`, 12 uppercase letters for Ticker",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "TrustedClaimIssuerDto": {
        "type": "object",
        "properties": {
          "trustedFor": {
            "nullable": true,
            "type": "array",
            "description": "List of Claim types for which an Identity is trusted for verifying. Defaults to all types",
            "default": null,
            "items": {
              "type": "string",
              "enum": [
                "Accredited",
                "Affiliate",
                "BuyLockup",
                "SellLockup",
                "CustomerDueDiligence",
                "KnowYourCustomer",
                "Jurisdiction",
                "Exempted",
                "Blocked",
                "InvestorUniqueness",
                "NoType",
                "NoData",
                "InvestorUniquenessV2"
              ]
            }
          },
          "identity": {
            "type": "string",
            "description": "The Identity of the Claim Issuer"
          }
        }
      },
      "ClaimDto": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "Accredited",
              "Affiliate",
              "BuyLockup",
              "SellLockup",
              "CustomerDueDiligence",
              "KnowYourCustomer",
              "Jurisdiction",
              "Exempted",
              "Blocked",
              "InvestorUniqueness",
              "NoType",
              "NoData",
              "InvestorUniquenessV2"
            ],
            "type": "string",
            "description": "The type of Claim. Note that different types require different fields",
            "example": "Accredited"
          },
          "scope": {
            "description": "The scope of the Claim. Required for most types except for `CustomerDueDiligence`, `InvestorUniquenessV2` and `NoData`",
            "allOf": [
              {
                "$ref": "#/components/schemas/ScopeDto"
              }
            ]
          },
          "code": {
            "enum": [
              "Af",
              "Ax",
              "Al",
              "Dz",
              "As",
              "Ad",
              "Ao",
              "Ai",
              "Aq",
              "Ag",
              "Ar",
              "Am",
              "Aw",
              "Au",
              "At",
              "Az",
              "Bs",
              "Bh",
              "Bd",
              "Bb",
              "By",
              "Be",
              "Bz",
              "Bj",
              "Bm",
              "Bt",
              "Bo",
              "Ba",
              "Bw",
              "Bv",
              "Br",
              "Vg",
              "Io",
              "Bn",
              "Bg",
              "Bf",
              "Bi",
              "Kh",
              "Cm",
              "Ca",
              "Cv",
              "Ky",
              "Cf",
              "Td",
              "Cl",
              "Cn",
              "Hk",
              "Mo",
              "Cx",
              "Cc",
              "Co",
              "Km",
              "Cg",
              "Cd",
              "Ck",
              "Cr",
              "Ci",
              "Hr",
              "Cu",
              "Cy",
              "Cz",
              "Dk",
              "Dj",
              "Dm",
              "Do",
              "Ec",
              "Eg",
              "Sv",
              "Gq",
              "Er",
              "Ee",
              "Et",
              "Fk",
              "Fo",
              "Fj",
              "Fi",
              "Fr",
              "Gf",
              "Pf",
              "Tf",
              "Ga",
              "Gm",
              "Ge",
              "De",
              "Gh",
              "Gi",
              "Gr",
              "Gl",
              "Gd",
              "Gp",
              "Gu",
              "Gt",
              "Gg",
              "Gn",
              "Gw",
              "Gy",
              "Ht",
              "Hm",
              "Va",
              "Hn",
              "Hu",
              "Is",
              "In",
              "Id",
              "Ir",
              "Iq",
              "Ie",
              "Im",
              "Il",
              "It",
              "Jm",
              "Jp",
              "Je",
              "Jo",
              "Kz",
              "Ke",
              "Ki",
              "Kp",
              "Kr",
              "Kw",
              "Kg",
              "La",
              "Lv",
              "Lb",
              "Ls",
              "Lr",
              "Ly",
              "Li",
              "Lt",
              "Lu",
              "Mk",
              "Mg",
              "Mw",
              "My",
              "Mv",
              "Ml",
              "Mt",
              "Mh",
              "Mq",
              "Mr",
              "Mu",
              "Yt",
              "Mx",
              "Fm",
              "Md",
              "Mc",
              "Mn",
              "Me",
              "Ms",
              "Ma",
              "Mz",
              "Mm",
              "Na",
              "Nr",
              "Np",
              "Nl",
              "An",
              "Nc",
              "Nz",
              "Ni",
              "Ne",
              "Ng",
              "Nu",
              "Nf",
              "Mp",
              "No",
              "Om",
              "Pk",
              "Pw",
              "Ps",
              "Pa",
              "Pg",
              "Py",
              "Pe",
              "Ph",
              "Pn",
              "Pl",
              "Pt",
              "Pr",
              "Qa",
              "Re",
              "Ro",
              "Ru",
              "Rw",
              "Bl",
              "Sh",
              "Kn",
              "Lc",
              "Mf",
              "Pm",
              "Vc",
              "Ws",
              "Sm",
              "St",
              "Sa",
              "Sn",
              "Rs",
              "Sc",
              "Sl",
              "Sg",
              "Sk",
              "Si",
              "Sb",
              "So",
              "Za",
              "Gs",
              "Ss",
              "Es",
              "Lk",
              "Sd",
              "Sr",
              "Sj",
              "Sz",
              "Se",
              "Ch",
              "Sy",
              "Tw",
              "Tj",
              "Tz",
              "Th",
              "Tl",
              "Tg",
              "Tk",
              "To",
              "Tt",
              "Tn",
              "Tr",
              "Tm",
              "Tc",
              "Tv",
              "Ug",
              "Ua",
              "Ae",
              "Gb",
              "Us",
              "Um",
              "Uy",
              "Uz",
              "Vu",
              "Ve",
              "Vn",
              "Vi",
              "Wf",
              "Eh",
              "Ye",
              "Zm",
              "Zw",
              "Bq",
              "Cw",
              "Sx"
            ],
            "type": "string",
            "description": "Country code for `Jurisdiction` type Claims",
            "example": "Ca"
          },
          "cddId": {
            "type": "string",
            "description": "cddId for `CustomerDueDiligence` and `InvestorUniqueness` type Claims",
            "example": "0x60000000000000000000000000000000"
          },
          "trustedClaimIssuers": {
            "description": "Optional Identities to trust for this Claim. Defaults to all",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrustedClaimIssuerDto"
            }
          }
        },
        "required": [
          "type"
        ]
      },
      "ClaimTargetDto": {
        "type": "object",
        "properties": {
          "target": {
            "type": "string",
            "description": "DID of the target Identity",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          },
          "claim": {
            "description": "The Claim to be added, modified or removed",
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimDto"
              }
            ]
          },
          "expiry": {
            "format": "date-time",
            "type": "string",
            "description": "The expiry date of the Claim",
            "example": "2021-05-22T23:00:00.000Z"
          }
        },
        "required": [
          "target",
          "claim"
        ]
      },
      "ModifyClaimsDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "claims": {
            "description": "An array of Claims. Note that different types of Claims require different fields",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClaimTargetDto"
            }
          }
        },
        "required": [
          "signer",
          "dryRun",
          "claims"
        ]
      },
      "ProofScopeIdCddIdMatchDto": {
        "type": "object",
        "properties": {
          "challengeResponses": {
            "description": "Challenge responses",
            "example": [
              "0x0600000000000000000000000000000000000000000000000000000000000000",
              "0x0700000000000000000000000000000000000000000000000000000000000000"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subtractExpressionsRes": {
            "type": "string",
            "description": "The subtracted expressions result",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          },
          "blindedScopeDidHash": {
            "type": "string",
            "description": "The blinded scope DID hash",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          }
        },
        "required": [
          "challengeResponses",
          "subtractExpressionsRes",
          "blindedScopeDidHash"
        ]
      },
      "ScopeClaimProofDto": {
        "type": "object",
        "properties": {
          "proofScopeIdWellFormed": {
            "type": "string",
            "description": "The proof scope Id of the claim",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          },
          "proofScopeIdCddIdMatch": {
            "description": "The proof scope Id of the claim",
            "oneOf": [
              {
                "type": "string",
                "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
              },
              {
                "$ref": "#/components/schemas/ProofScopeIdCddIdMatchDto"
              }
            ]
          }
        },
        "required": [
          "proofScopeIdWellFormed",
          "proofScopeIdCddIdMatch"
        ]
      },
      "AddInvestorUniquenessDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "scope": {
            "description": "The type of Claim. Note that different types require different fields",
            "allOf": [
              {
                "$ref": "#/components/schemas/ScopeDto"
              }
            ]
          },
          "cddId": {
            "type": "string",
            "description": "The CDD ID of the investor",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          },
          "proof": {
            "description": "The proof of the claim",
            "oneOf": [
              {
                "type": "string",
                "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
              },
              {
                "$ref": "#/components/schemas/ScopeClaimProofDto"
              }
            ]
          },
          "scopeId": {
            "type": "string",
            "description": "The scope ID of the claim",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          },
          "expiry": {
            "format": "date-time",
            "type": "string",
            "description": "The expiry date of the claim",
            "example": "2020-01-01"
          }
        },
        "required": [
          "signer",
          "dryRun",
          "scope",
          "cddId",
          "proof",
          "scopeId"
        ]
      },
      "RequirementModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the Requirement",
            "example": "1"
          },
          "conditions": {
            "description": "List of Conditions",
            "example": [
              {
                "type": "IsPresent",
                "claim": {
                  "type": "Accredited",
                  "scope": {
                    "type": "Identity",
                    "value": "0x0600000000000000000000000000000000000000000000000000000000000000"
                  }
                },
                "target": "Receiver",
                "trustedClaimIssuers": []
              }
            ],
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "conditions"
        ]
      },
      "TrustedClaimIssuerModel": {
        "type": "object",
        "properties": {
          "did": {
            "type": "string",
            "description": "DID of the Claim Issuer",
            "example": "0x0600000000000000000000000000000000000000000000000000000000000000"
          },
          "trustedFor": {
            "type": "array",
            "description": "List of Claim types for which this Claim Issuer is trusted. A null value means that the issuer is trusted for all Claim types",
            "example": [
              "Accredited",
              "InvestorUniqueness"
            ],
            "nullable": true,
            "items": {
              "type": "string",
              "enum": [
                "Accredited",
                "Affiliate",
                "BuyLockup",
                "SellLockup",
                "CustomerDueDiligence",
                "KnowYourCustomer",
                "Jurisdiction",
                "Exempted",
                "Blocked",
                "InvestorUniqueness",
                "NoType",
                "NoData",
                "InvestorUniquenessV2"
              ]
            }
          }
        },
        "required": [
          "did"
        ]
      },
      "ComplianceRequirementsModel": {
        "type": "object",
        "properties": {
          "requirements": {
            "description": "List of an Asset's compliance requirements",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequirementModel"
            }
          },
          "defaultTrustedClaimIssuers": {
            "description": "List of default Trusted Claim Issuers. This is used for conditions where no trusted Claim issuers were specified (i.e. where `trustedClaimIssuers` is undefined)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrustedClaimIssuerModel"
            }
          }
        },
        "required": [
          "requirements",
          "defaultTrustedClaimIssuers"
        ]
      },
      "ConditionDto": {
        "type": "object",
        "properties": {
          "target": {
            "enum": [
              "Sender",
              "Receiver",
              "Both"
            ],
            "type": "string",
            "description": "Whether the Condition applies to the sender, the receiver, or both",
            "example": "Both"
          },
          "type": {
            "enum": [
              "IsPresent",
              "IsAbsent",
              "IsAnyOf",
              "IsNoneOf",
              "IsExternalAgent",
              "IsIdentity"
            ],
            "type": "string",
            "description": "The type of Condition. \"IsPresent\" requires the target(s) to have a specific Claim. \"IsAbsent\" is the opposite. \"IsAnyOf\" requires the target(s) to have at least one of a list of Claims. \"IsNoneOf\" is the opposite. \"IsIdentity\" requires the target(s) to be a specific Identity",
            "example": "IsNoneOf"
          },
          "trustedClaimIssuers": {
            "description": "Optional Trusted Claim Issuer for this Condition. Defaults to all",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrustedClaimIssuerDto"
            }
          },
          "claim": {
            "description": "The Claim for \"IsPresent\" or \"IsAbsent\" Conditions",
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimDto"
              }
            ]
          },
          "claims": {
            "description": "Claims for \"IsAnyOf\" or \"IsNoneOf\" Conditions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClaimDto"
            }
          },
          "identity": {
            "type": "string",
            "description": "The DID of the Identity for \"IsIdentity\" Conditions"
          }
        },
        "required": [
          "target",
          "type"
        ]
      },
      "SetRequirementsDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "requirements": {
            "description": "Asset transfers must comply with all of the rules in one of the top level elements. Essentially each outer array element has an *or* between them, while the inner elements have an *and* between them",
            "example": [
              [
                {
                  "target": "Both",
                  "type": "IsNoneOf",
                  "claims": [
                    {
                      "type": "Blocked",
                      "scope": {
                        "type": "Identity",
                        "value": "0x0600000000000000000000000000000000000000000000000000000000000000"
                      }
                    },
                    {
                      "type": "Jurisdiction",
                      "scope": {
                        "type": "Ticker",
                        "value": "TICKER"
                      },
                      "code": "Us"
                    }
                  ],
                  "trustedClaimIssuers": [
                    {
                      "identity": "0x0600000000000000000000000000000000000000000000000000000000000000",
                      "trustedFor": [
                        "Blocked"
                      ]
                    }
                  ]
                }
              ],
              [
                {
                  "target": "Sender",
                  "type": "IsPresent",
                  "claim": {
                    "type": "Accredited",
                    "scope": {
                      "type": "Ticker",
                      "value": "TICKER"
                    }
                  }
                }
              ],
              [
                {
                  "target": "Receiver",
                  "type": "IsIdentity",
                  "identity": "0x0600000000000000000000000000000000000000000000000000000000000000"
                }
              ]
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConditionDto"
            }
          }
        },
        "required": [
          "signer",
          "dryRun",
          "requirements"
        ]
      },
      "RequirementDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "conditions": {
            "description": "Asset transfers must comply with all of the rules in one of the top level elements. Essentially each outer array element has an *or* between them, while the inner elements have an *and* between them",
            "example": [
              {
                "target": "Both",
                "type": "IsNoneOf",
                "claims": [
                  {
                    "type": "Blocked",
                    "scope": {
                      "type": "Identity",
                      "value": "0x0600000000000000000000000000000000000000000000000000000000000000"
                    }
                  },
                  {
                    "type": "Jurisdiction",
                    "scope": {
                      "type": "Ticker",
                      "value": "TICKER"
                    },
                    "code": "Us"
                  }
                ],
                "trustedClaimIssuers": [
                  {
                    "identity": "0x0600000000000000000000000000000000000000000000000000000000000000",
                    "trustedFor": [
                      "Blocked"
                    ]
                  }
                ]
              }
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionDto"
              }
            ]
          }
        },
        "required": [
          "signer",
          "dryRun",
          "conditions"
        ]
      },
      "ComplianceStatusModel": {
        "type": "object",
        "properties": {
          "arePaused": {
            "type": "boolean",
            "description": "Indicator to know if compliance requirements are paused or not",
            "example": true
          }
        },
        "required": [
          "arePaused"
        ]
      },
      "SetTrustedClaimIssuersDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "claimIssuers": {
            "description": "The list of Claim Issuers that will be trusted to issue Claims of the specified type",
            "example": [
              {
                "identity": "0x0600000000000000000000000000000000000000000000000000000000000000",
                "trustedFor": [
                  "Accredited",
                  "KnowYourCustomer"
                ]
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrustedClaimIssuerDto"
            }
          }
        },
        "required": [
          "signer",
          "dryRun",
          "claimIssuers"
        ]
      },
      "RemoveTrustedClaimIssuersDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "An identifier for the account that should sign the transaction",
            "example": "alice"
          },
          "dryRun": {
            "type": "boolean",
            "description": "An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain",
            "example": false
          },
          "claimIssuers": {
            "type": "array",
            "items": {
              "required": true,
              "description": "The list of Claim issuer identities that should be removed",
              "example": [
                "0x0600000000000000000000000000000000000000000000000000000000000000"
              ],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "signer",
          "dryRun",
          "claimIssuers"
        ]
      },
      "CreateTestAdminsDto": {
        "type": "object",
        "properties": {
          "accounts": {
            "description": "The addresses for which to create Identities and set their POLYX balances",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateMockIdentityDto"
            }
          }
        },
        "required": [
          "accounts"
        ]
      },
      "CreateTestAccountsDto": {
        "type": "object",
        "properties": {
          "signer": {
            "type": "string",
            "description": "The `signer` to use. The account must have CDD provider permissions, and sufficient POLYX to seed account. Defaults to the configured sudo account",
            "example": "alice"
          },
          "accounts": {
            "description": "The addresses for which to create Identities",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateMockIdentityDto"
            }
          }
        },
        "required": [
          "accounts"
        ]
      }
    }
  }
}