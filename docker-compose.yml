services:
  chain:
    image: ${CHAIN_IMAGE}
    init: true # Faster shutdown by container process not be PID 1
    restart: unless-stopped
    ports:
      # expose ports to localhost
      - '9944:9944' # ws://
      - '9933:9933' # http://
      - '30333:30333' # for other nodes
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    volumes:
      - './compose/chain-entry.sh:/chain-entry.sh'
    entrypoint: '/chain-entry.sh'
    command: [ '--alice --chain dev' ]
    healthcheck:
      test: "timeout 5 bash -c 'cat < /dev/null > /dev/tcp/localhost/9933' && exit 0 || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  subquery:
    image: '${SUBQUERY_IMAGE}'
    init: true
    restart: unless-stopped
    depends_on:
      - 'postgres'
    environment:
      NETWORK_ENDPOINT: ws://chain:9944
      NETWORK_HTTP_ENDPOINT: http://chain:9933
      DB_USER: '${PG_USER:-postgres}'
      DB_PASS: '${PG_PASSWORD:-postgres}'
      DB_DATABASE: '${PG_DB:-postgres}'
      DB_PORT: '${PG_PORT:-5432}'
      DB_HOST: '${PG_HOST:-postgres}'
      NODE_ENV: local
    command:
      - --batch-size=500
      - -f=/app
      - --local
    healthcheck:
      test: curl --fail http://localhost:3000/meta || exit 1
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s

  graphql:
    image: onfinality/subql-query:v1.0.0
    restart: unless-stopped
    ports:
      - ${SQ_PORT:-3001}:3000
    depends_on:
      postgres:
        condition: service_started
      subquery:
        condition: service_healthy
    environment:
      DB_DATABASE: postgres
      DB_USER: '${PG_USER:-postgres}'
      DB_PASS: '${PG_PASSWORD:-postgres}'
      DB_PORT: '${PG_PORT:-5432}'
      DB_HOST: '${PG_HOST:-postgres}'
    command:
      - --name=public
      - --playground
      - --indexer=http://subquery:3000

  artemis:
    image: apache/activemq-artemis:2.31.2
    ports:
      - 8161:8161 # Web Server
      - 61616:61616 # Core,MQTT,AMQP,HORNETQ,STOMP,OpenWire
      - 5672:5672 # AMQP
    volumes:
      - './compose/broker.xml:/var/lib/artemis-instance/etc-override/broker.xml'
    environment:
      ARTEMIS_USERNAME: artemis
      ARTEMIS_PASSWORD: artemis
      AMQ_EXTRA_ARGS: "--nio" # "aio" offers better performance, but less platforms support it

  postgres:
    image: postgres:15
    ports:
      - $REST_POSTGRES_PORT:5432
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./compose/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    environment:
      POSTGRES_USER: $REST_POSTGRES_USER
      POSTGRES_PASSWORD: $REST_POSTGRES_PASSWORD
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U postgres' ]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  db-data:
